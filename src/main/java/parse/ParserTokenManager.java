/* ParserTokenManager.java */
/* Generated by: ParserGeneratorCC: Do not edit this line. ParserTokenManager.java */
package parse;
import io.questdb.griffin.model.ExpressionNode;
import io.questdb.std.ObjectPool;
import java.util.ArrayDeque;
import java.util.Deque;

/** Token Manager. */
@SuppressWarnings ("unused")
public class ParserTokenManager implements ParserConstants {
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x3fffffffffffe0L) != 0x0L || (active1 & 0xfffba8000ff8L) != 0x0L)
         {
            jjmatchedKind = 60;
            return 68;
         }
         if ((active1 & 0x100000L) != 0x0L)
            return 3;
         if ((active1 & 0x400200000L) != 0x0L)
            return 69;
         if ((active1 & 0x10000000L) != 0x0L)
            return 18;
         if ((active1 & 0x20000L) != 0x0L)
            return 0;
         return -1;
      case 1:
         if ((active0 & 0x307e0004600L) != 0x0L || (active1 & 0x80000828L) != 0x0L)
            return 68;
         if ((active0 & 0x3ffcf81fffb9e0L) != 0x0L || (active1 & 0xfffb280007d0L) != 0x0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 1;
            }
            return 68;
         }
         return -1;
      case 2:
         if ((active0 & 0x2040020005a0L) != 0x0L)
            return 68;
         if ((active1 & 0x40000000000L) != 0x0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 2;
            }
            return 11;
         }
         if ((active0 & 0x3fdebbddffb840L) != 0x0L || (active1 & 0x73fba8000ff8L) != 0x0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 2;
            }
            return 68;
         }
         return -1;
      case 3:
         if ((active1 & 0x40000000000L) != 0x0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 3;
            }
            return 11;
         }
         if ((active0 & 0xf5e21c4c8b840L) != 0x0L || (active1 & 0x52fba0000fd8L) != 0x0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 60;
               jjmatchedPos = 3;
            }
            return 68;
         }
         if ((active0 & 0x30809a19370000L) != 0x0L || (active1 & 0x200000000000L) != 0x0L)
            return 68;
         return -1;
      case 4:
         if ((active0 & 0x94200c4008840L) != 0x0L)
            return 68;
         if ((active1 & 0x40000000400L) != 0x0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 4;
            return 11;
         }
         if ((active0 & 0x61c2100c83000L) != 0x0L || (active1 & 0x70cba0000b50L) != 0x0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 4;
            return 68;
         }
         return -1;
      case 5:
         if ((active0 & 0x6180000800000L) != 0x0L)
            return 68;
         if ((active1 & 0x40000000400L) != 0x0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 5;
            return 11;
         }
         if ((active0 & 0x42100483000L) != 0x0L || (active1 & 0x408aa0000b40L) != 0x0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 5;
            return 68;
         }
         return -1;
      case 6:
         if ((active0 & 0x40000480000L) != 0x0L || (active1 & 0x88a0000100L) != 0x0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 6;
            return 68;
         }
         if ((active0 & 0x2100003000L) != 0x0L)
            return 68;
         if ((active1 & 0x40000000400L) != 0x0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 6;
            return 11;
         }
         return -1;
      case 7:
         if ((active1 & 0x40000000000L) != 0x0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 7;
            return 11;
         }
         if ((active0 & 0x480000L) != 0x0L)
            return 68;
         if ((active0 & 0x40000000000L) != 0x0L || (active1 & 0x880000100L) != 0x0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 7;
            return 68;
         }
         return -1;
      case 8:
         if ((active0 & 0x40000000000L) != 0x0L)
            return 68;
         if ((active1 & 0x880000100L) != 0x0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 8;
            return 68;
         }
         if ((active1 & 0x40000000000L) != 0x0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 8;
            return 11;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case '!':
         return jjStopAtPos(0, 87);
      case '#':
         return jjStopAtPos(0, 88);
      case '$':
         return jjStopAtPos(0, 66);
      case '(':
         return jjStopAtPos(0, 76);
      case ')':
         return jjStopAtPos(0, 78);
      case '*':
         return jjStopAtPos(0, 83);
      case '+':
         return jjStopAtPos(0, 80);
      case ',':
         return jjStopAtPos(0, 77);
      case '-':
         return jjStartNfaWithStates_0(0, 81, 0);
      case '.':
         jjmatchedKind = 85;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000L);
      case '/':
         return jjStartNfaWithStates_0(0, 84, 3);
      case ':':
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000L);
      case ';':
         return jjStopAtPos(0, 79);
      case '<':
         return jjStopAtPos(0, 90);
      case '=':
         jjmatchedKind = 86;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000L);
      case '>':
         return jjStopAtPos(0, 89);
      case 'A':
      case 'a':
         return jjMoveStringLiteralDfa1_0(0x7e0L, 0x0L);
      case 'B':
      case 'b':
         return jjMoveStringLiteralDfa1_0(0x7800L, 0x208L);
      case 'C':
      case 'c':
         return jjMoveStringLiteralDfa1_0(0xf8000L, 0x8000000000L);
      case 'D':
      case 'd':
         return jjMoveStringLiteralDfa1_0(0xf00000L, 0x20000000L);
      case 'E':
      case 'e':
         return jjMoveStringLiteralDfa1_0(0x3000000L, 0x400000000000L);
      case 'F':
      case 'f':
         return jjMoveStringLiteralDfa1_0(0x1c000000L, 0x0L);
      case 'I':
      case 'i':
         return jjMoveStringLiteralDfa1_0(0x7e0000000L, 0x80000820L);
      case 'L':
      case 'l':
         return jjMoveStringLiteralDfa1_0(0x1800000000L, 0x480L);
      case 'M':
      case 'm':
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000L);
      case 'N':
      case 'n':
         return jjMoveStringLiteralDfa1_0(0xe000000000L, 0x200000000000L);
      case 'O':
      case 'o':
         return jjMoveStringLiteralDfa1_0(0x30000000000L, 0xa1008000000L);
      case 'P':
      case 'p':
         return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x40000000000L);
      case 'R':
      case 'r':
         return jjMoveStringLiteralDfa1_0(0x0L, 0x116800000000L);
      case 'S':
      case 's':
         return jjMoveStringLiteralDfa1_0(0x4380000000000L, 0x50L);
      case 'T':
      case 't':
         return jjMoveStringLiteralDfa1_0(0xc00000000000L, 0x800000000100L);
      case 'U':
      case 'u':
         return jjMoveStringLiteralDfa1_0(0x1000000000000L, 0x200000000L);
      case 'V':
      case 'v':
         return jjMoveStringLiteralDfa1_0(0x2000000000000L, 0x0L);
      case 'W':
      case 'w':
         return jjMoveStringLiteralDfa1_0(0x38000000000000L, 0x0L);
      case '|':
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000L);
      default :
         return jjMoveNfa_0(2, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case '*':
         if ((active1 & 0x400000000L) != 0x0L)
            return jjStopAtPos(1, 98);
         break;
      case '=':
         if ((active1 & 0x10000000L) != 0x0L)
            return jjStopAtPos(1, 92);
         break;
      case '>':
         if ((active1 & 0x40000000L) != 0x0L)
            return jjStopAtPos(1, 94);
         break;
      case 'A':
      case 'a':
         return jjMoveStringLiteralDfa2_0(active0, 0x24c00001b8000L, active1, 0x4000000000L);
      case 'E':
      case 'e':
         return jjMoveStringLiteralDfa2_0(active0, 0x300800201800L, active1, 0x820000000L);
      case 'H':
      case 'h':
         return jjMoveStringLiteralDfa2_0(active0, 0x18800000040000L, active1, 0x10L);
      case 'I':
      case 'i':
         return jjMoveStringLiteralDfa2_0(active0, 0x20001000400000L, active1, 0x100100000300L);
      case 'L':
      case 'l':
         return jjMoveStringLiteralDfa2_0(active0, 0x5000060L, active1, 0x0L);
      case 'N':
      case 'n':
         if ((active0 & 0x20000000L) != 0x0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x80000000000L) != 0x0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x10003c2000180L, active1, 0x20280000820L);
      case 'O':
      case 'o':
         if ((active1 & 0x800000000000L) != 0x0L)
            return jjStartNfaWithStates_0(1, 60, 68);
         return jjMoveStringLiteralDfa2_0(active0, 0x6000802000L, active1, 0x12000000480L);
      case 'R':
      case 'r':
         if ((active0 & 0x10000000000L) != 0x0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x20008000000L, active1, 0x0L);
      case 'S':
      case 's':
         if ((active0 & 0x200L) != 0x0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x400000000L) != 0x0L)
            return jjStartNfaWithStates_0(1, 34, 68);
         return jjMoveStringLiteralDfa2_0(active0, 0x400L, active1, 0x0L);
      case 'T':
      case 't':
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000L, active1, 0x0L);
      case 'U':
      case 'u':
         return jjMoveStringLiteralDfa2_0(active0, 0x8010000000L, active1, 0x208008000000L);
      case 'V':
      case 'v':
         return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0x1000000000L);
      case 'X':
      case 'x':
         return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0x440000000000L);
      case 'Y':
      case 'y':
         if ((active0 & 0x4000L) != 0x0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0x48L);
      case '|':
         if ((active1 & 0x40000L) != 0x0L)
            return jjStopAtPos(1, 82);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case '_':
         return jjMoveStringLiteralDfa3_0(active0, 0x0L, active1, 0x40000000000L);
      case 'A':
      case 'a':
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L, active1, 0x0L);
      case 'B':
      case 'b':
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L, active1, 0x0L);
      case 'C':
      case 'c':
         if ((active0 & 0x400L) != 0x0L)
            return jjStartNfaWithStates_0(2, 10, 68);
         return jjMoveStringLiteralDfa3_0(active0, 0x2000008000L, active1, 0x0L);
      case 'D':
      case 'd':
         if ((active0 & 0x80L) != 0x0L)
            return jjStartNfaWithStates_0(2, 7, 68);
         else if ((active0 & 0x2000000L) != 0x0L)
            return jjStartNfaWithStates_0(2, 25, 68);
         return jjMoveStringLiteralDfa3_0(active0, 0x20040000000L, active1, 0x0L);
      case 'E':
      case 'e':
         return jjMoveStringLiteralDfa3_0(active0, 0x18800000000000L, active1, 0x1000000000L);
      case 'F':
      case 'f':
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L, active1, 0x20000000L);
      case 'G':
      case 'g':
         return jjMoveStringLiteralDfa3_0(active0, 0x800L, active1, 0x100000000000L);
      case 'I':
      case 'i':
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000L, active1, 0x400200000000L);
      case 'K':
      case 'k':
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L, active1, 0x0L);
      case 'L':
      case 'l':
         if ((active0 & 0x20L) != 0x0L)
            return jjStartNfaWithStates_0(2, 5, 68);
         return jjMoveStringLiteralDfa3_0(active0, 0x2108010000000L, active1, 0x220000000000L);
      case 'M':
      case 'm':
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L, active1, 0x140L);
      case 'N':
      case 'n':
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L, active1, 0x4100000680L);
      case 'O':
      case 'o':
         return jjMoveStringLiteralDfa3_0(active0, 0xc002000L, active1, 0x10L);
      case 'P':
      case 'p':
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L, active1, 0x0L);
      case 'R':
      case 'r':
         return jjMoveStringLiteralDfa3_0(active0, 0x4040000000000L, active1, 0x8000000000L);
      case 'S':
      case 's':
         return jjMoveStringLiteralDfa3_0(active0, 0x1630000L, active1, 0x800L);
      case 'T':
      case 't':
         if ((active0 & 0x4000000000L) != 0x0L)
            return jjStartNfaWithStates_0(2, 38, 68);
         else if ((active0 & 0x200000000000L) != 0x0L)
            return jjStartNfaWithStates_0(2, 45, 68);
         else if ((active1 & 0x20L) != 0x0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x8000000L) != 0x0L)
            return jjStartNfaWithStates_0(2, 60, 68);
         return jjMoveStringLiteralDfa3_0(active0, 0x20000300101040L, active1, 0x880000008L);
      case 'U':
      case 'u':
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L, active1, 0x0L);
      case 'W':
      case 'w':
         if ((active1 & 0x10000000000L) != 0x0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x0L, active1, 0x2000000000L);
      case 'Y':
      case 'y':
         if ((active0 & 0x100L) != 0x0L)
            return jjStartNfaWithStates_0(2, 8, 68);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 'A':
      case 'a':
         return jjMoveStringLiteralDfa4_0(active0, 0x2004080000L, active1, 0x20000200L);
      case 'B':
      case 'b':
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L, active1, 0x40L);
      case 'C':
      case 'c':
         if ((active0 & 0x200000L) != 0x0L)
            return jjStartNfaWithStates_0(3, 21, 68);
         break;
      case 'E':
      case 'e':
         if ((active0 & 0x10000L) != 0x0L)
            return jjStartNfaWithStates_0(3, 16, 68);
         else if ((active0 & 0x100000L) != 0x0L)
            return jjStartNfaWithStates_0(3, 20, 68);
         else if ((active0 & 0x1000000L) != 0x0L)
            return jjStartNfaWithStates_0(3, 24, 68);
         else if ((active0 & 0x1000000000L) != 0x0L)
            return jjStartNfaWithStates_0(3, 36, 68);
         else if ((active1 & 0x8L) != 0x0L)
            return jjStartNfaWithStates_0(3, 60, 68);
         return jjMoveStringLiteralDfa4_0(active0, 0x1201c0000040L, active1, 0x80000900L);
      case 'G':
      case 'g':
         if ((active1 & 0x80L) != 0x0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x0L, active1, 0x44000000400L);
      case 'H':
      case 'h':
         if ((active0 & 0x20000000000000L) != 0x0L)
            return jjStartNfaWithStates_0(3, 53, 68);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L, active1, 0x100000000000L);
      case 'I':
      case 'i':
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000800L, active1, 0x0L);
      case 'L':
      case 'l':
         if ((active0 & 0x10000000L) != 0x0L)
            return jjStartNfaWithStates_0(3, 28, 68);
         else if ((active0 & 0x8000000000L) != 0x0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x400000002000L, active1, 0x200000000000L);
      case 'M':
      case 'm':
         if ((active0 & 0x8000000L) != 0x0L)
            return jjStartNfaWithStates_0(3, 27, 68);
         break;
      case 'N':
      case 'n':
         if ((active0 & 0x800000000000L) != 0x0L)
            return jjStartNfaWithStates_0(3, 47, 68);
         else if ((active0 & 0x10000000000000L) != 0x0L)
            return jjStartNfaWithStates_0(3, 52, 68);
         break;
      case 'O':
      case 'o':
         if ((active0 & 0x200000000L) != 0x0L)
            return jjStartNfaWithStates_0(3, 33, 68);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L, active1, 0x0L);
      case 'P':
      case 'p':
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L, active1, 0x0L);
      case 'Q':
      case 'q':
         return jjMoveStringLiteralDfa4_0(active0, 0x0L, active1, 0x200000000L);
      case 'R':
      case 'r':
         if ((active0 & 0x40000L) != 0x0L)
            return jjStartNfaWithStates_0(3, 18, 68);
         else if ((active1 & 0x1000000000L) != 0x0L)
            return jjStartNfaWithStates_0(3, 60, 68);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000L, active1, 0x8000000010L);
      case 'S':
      case 's':
         if ((active1 & 0x2000000000L) != 0x0L)
            return jjStartNfaWithStates_0(3, 60, 68);
         return jjMoveStringLiteralDfa4_0(active0, 0x0L, active1, 0x400000000000L);
      case 'T':
      case 't':
         if ((active0 & 0x20000L) != 0x0L)
            return jjStartNfaWithStates_0(3, 17, 68);
         else if ((active0 & 0x800000000L) != 0x0L)
            return jjStartNfaWithStates_0(3, 35, 68);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000400000L, active1, 0x0L);
      case 'U':
      case 'u':
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L, active1, 0x900000000L);
      case 'W':
      case 'w':
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L, active1, 0x0L);
      case 'Y':
      case 'y':
         if ((active1 & 0x20000000000L) != 0x0L)
            return jjStartNfaWithStates_0(3, 60, 68);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case '2':
         return jjMoveStringLiteralDfa5_0(active0, 0x0L, active1, 0x400L);
      case 'C':
      case 'c':
         return jjMoveStringLiteralDfa5_0(active0, 0x102000080000L, active1, 0x0L);
      case 'E':
      case 'e':
         if ((active0 & 0x8000L) != 0x0L)
            return jjStartNfaWithStates_0(4, 15, 68);
         else if ((active0 & 0x400000000000L) != 0x0L)
            return jjStartNfaWithStates_0(4, 46, 68);
         else if ((active0 & 0x8000000000000L) != 0x0L)
            return jjStartNfaWithStates_0(4, 51, 68);
         else if ((active1 & 0x4000000000L) != 0x0L)
            return jjStartNfaWithStates_0(4, 60, 68);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000003000L, active1, 0x8000000000L);
      case 'G':
      case 'g':
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L, active1, 0x0L);
      case 'I':
      case 'i':
         return jjMoveStringLiteralDfa5_0(active0, 0x40000400000L, active1, 0x0L);
      case 'L':
      case 'l':
         return jjMoveStringLiteralDfa5_0(active0, 0x80000800000L, active1, 0x0L);
      case 'N':
      case 'n':
         if ((active0 & 0x800L) != 0x0L)
            return jjStartNfaWithStates_0(4, 11, 68);
         else if ((active0 & 0x1000000000000L) != 0x0L)
            return jjStartNfaWithStates_0(4, 48, 68);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000L, active1, 0x0L);
      case 'O':
      case 'o':
         return jjMoveStringLiteralDfa5_0(active0, 0x0L, active1, 0x40L);
      case 'R':
      case 'r':
         if ((active0 & 0x40L) != 0x0L)
            return jjStartNfaWithStates_0(4, 6, 68);
         else if ((active0 & 0x80000000L) != 0x0L)
            return jjStartNfaWithStates_0(4, 31, 68);
         else if ((active0 & 0x20000000000L) != 0x0L)
            return jjStartNfaWithStates_0(4, 41, 68);
         return jjMoveStringLiteralDfa5_0(active0, 0x0L, active1, 0x40880000a00L);
      case 'S':
      case 's':
         if ((active1 & 0x100000000L) != 0x0L)
            return jjStartNfaWithStates_0(4, 60, 68);
         else if ((active1 & 0x200000000000L) != 0x0L)
            return jjStartNfaWithStates_0(4, 60, 68);
         return jjMoveStringLiteralDfa5_0(active0, 0x0L, active1, 0x100L);
      case 'T':
      case 't':
         if ((active0 & 0x4000000L) != 0x0L)
            return jjStartNfaWithStates_0(4, 26, 68);
         else if ((active1 & 0x10L) != 0x0L)
            return jjStartNfaWithStates_0(4, 60, 68);
         else if ((active1 & 0x100000000000L) != 0x0L)
            return jjStartNfaWithStates_0(4, 60, 68);
         return jjMoveStringLiteralDfa5_0(active0, 0x0L, active1, 0x400000000000L);
      case 'U':
      case 'u':
         return jjMoveStringLiteralDfa5_0(active0, 0x0L, active1, 0x220000000L);
      case 'X':
      case 'x':
         if ((active0 & 0x40000000L) != 0x0L)
            return jjStartNfaWithStates_0(4, 30, 68);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case '5':
         return jjMoveStringLiteralDfa6_0(active0, 0x0L, active1, 0x400L);
      case 'A':
      case 'a':
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L, active1, 0x40000000000L);
      case 'E':
      case 'e':
         if ((active0 & 0x800000L) != 0x0L)
            return jjStartNfaWithStates_0(5, 23, 68);
         else if ((active0 & 0x80000000000L) != 0x0L)
            return jjStartNfaWithStates_0(5, 43, 68);
         else if ((active1 & 0x200000000L) != 0x0L)
            return jjStartNfaWithStates_0(5, 60, 68);
         return jjMoveStringLiteralDfa6_0(active0, 0x100001000L, active1, 0x0L);
      case 'G':
      case 'g':
         if ((active0 & 0x4000000000000L) != 0x0L)
            return jjStartNfaWithStates_0(5, 50, 68);
         break;
      case 'H':
      case 'h':
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L, active1, 0x0L);
      case 'I':
      case 'i':
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L, active1, 0x0L);
      case 'L':
      case 'l':
         if ((active1 & 0x40L) != 0x0L)
            return jjStartNfaWithStates_0(5, 60, 68);
         return jjMoveStringLiteralDfa6_0(active0, 0x0L, active1, 0x20000000L);
      case 'N':
      case 'n':
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L, active1, 0x8800000000L);
      case 'S':
      case 's':
         if ((active0 & 0x2000000000000L) != 0x0L)
            return jjStartNfaWithStates_0(5, 49, 68);
         else if ((active1 & 0x400000000000L) != 0x0L)
            return jjStartNfaWithStates_0(5, 60, 68);
         return jjMoveStringLiteralDfa6_0(active0, 0x0L, active1, 0x80000000L);
      case 'T':
      case 't':
         if ((active0 & 0x100000000000L) != 0x0L)
            return jjStartNfaWithStates_0(5, 44, 68);
         else if ((active1 & 0x800L) != 0x0L)
            return jjStartNfaWithStates_0(5, 60, 68);
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L, active1, 0x100L);
      case 'Y':
      case 'y':
         if ((active1 & 0x200L) != 0x0L)
            return jjStartNfaWithStates_0(5, 60, 68);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case '6':
         if ((active1 & 0x400L) != 0x0L)
            return jjStartNfaWithStates_0(6, 60, 11);
         break;
      case 'A':
      case 'a':
         return jjMoveStringLiteralDfa7_0(active0, 0x0L, active1, 0x100L);
      case 'C':
      case 'c':
         return jjMoveStringLiteralDfa7_0(active0, 0x400000L, active1, 0x0L);
      case 'E':
      case 'e':
         if ((active0 & 0x2000000000L) != 0x0L)
            return jjStartNfaWithStates_0(6, 37, 68);
         return jjMoveStringLiteralDfa7_0(active0, 0x0L, active1, 0x80000000L);
      case 'I':
      case 'i':
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000L, active1, 0x800000000L);
      case 'N':
      case 'n':
         if ((active0 & 0x1000L) != 0x0L)
            return jjStartNfaWithStates_0(6, 12, 68);
         else if ((active0 & 0x2000L) != 0x0L)
            return jjStartNfaWithStates_0(6, 13, 68);
         return jjMoveStringLiteralDfa7_0(active0, 0x0L, active1, 0x40000000000L);
      case 'R':
      case 'r':
         if ((active0 & 0x100000000L) != 0x0L)
            return jjStartNfaWithStates_0(6, 32, 68);
         break;
      case 'T':
      case 't':
         if ((active1 & 0x20000000L) != 0x0L)
            return jjStartNfaWithStates_0(6, 60, 68);
         else if ((active1 & 0x8000000000L) != 0x0L)
            return jjStartNfaWithStates_0(6, 60, 68);
         return jjMoveStringLiteralDfa7_0(active0, 0x80000L, active1, 0x0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 'C':
      case 'c':
         return jjMoveStringLiteralDfa8_0(active0, 0x0L, active1, 0x80000000L);
      case 'M':
      case 'm':
         return jjMoveStringLiteralDfa8_0(active0, 0x0L, active1, 0x100L);
      case 'N':
      case 'n':
         return jjMoveStringLiteralDfa8_0(active0, 0x0L, active1, 0x800000000L);
      case 'O':
      case 'o':
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000L, active1, 0x0L);
      case 'T':
      case 't':
         if ((active0 & 0x400000L) != 0x0L)
            return jjStartNfaWithStates_0(7, 22, 68);
         break;
      case 'U':
      case 'u':
         return jjMoveStringLiteralDfa8_0(active0, 0x0L, active1, 0x40000000000L);
      case 'Y':
      case 'y':
         if ((active0 & 0x80000L) != 0x0L)
            return jjStartNfaWithStates_0(7, 19, 68);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 'G':
      case 'g':
         if ((active1 & 0x800000000L) != 0x0L)
            return jjStartNfaWithStates_0(8, 60, 68);
         break;
      case 'L':
      case 'l':
         return jjMoveStringLiteralDfa9_0(active0, 0x0L, active1, 0x40000000000L);
      case 'N':
      case 'n':
         if ((active0 & 0x40000000000L) != 0x0L)
            return jjStartNfaWithStates_0(8, 42, 68);
         break;
      case 'P':
      case 'p':
         if ((active1 & 0x100L) != 0x0L)
            return jjStartNfaWithStates_0(8, 60, 68);
         break;
      case 'T':
      case 't':
         if ((active1 & 0x80000000L) != 0x0L)
            return jjStartNfaWithStates_0(8, 60, 68);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, 0L, active1);
      return 9;
   }
   switch(curChar)
   {
      case 'E':
      case 'e':
         if ((active1 & 0x40000000000L) != 0x0L)
            return jjStartNfaWithStates_0(9, 60, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, 0L, active1);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 68;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0x3ff000000000000L & l) != 0x0L)
                  {
                     if (kind > 54)
                        kind = 54;
                     { jjCheckNAddStates(0, 6); }
                  }
                  else if (curChar == 46)
                     { jjCheckNAddTwoStates(48, 58); }
                  else if (curChar == 34)
                     { jjCheckNAddTwoStates(45, 46); }
                  else if (curChar == 39)
                     { jjCheckNAddTwoStates(40, 41); }
                  else if (curChar == 58)
                     { jjAddStates(7, 9); }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 3;
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 68:
               case 11:
                  if ((0x3ff001800000000L & l) == 0x0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  { jjCheckNAdd(11); }
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) != 0x0L)
                  {
                     if (kind > 54)
                        kind = 54;
                     { jjCheckNAdd(58); }
                  }
                  if ((0x3ff000000000000L & l) != 0x0L)
                  {
                     if (kind > 54)
                        kind = 54;
                     { jjCheckNAddTwoStates(48, 49); }
                  }
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) != 0x0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     { jjCheckNAddStates(10, 16); }
                  }
                  else if (curChar == 46)
                     { jjCheckNAddTwoStates(37, 38); }
                  break;
               case 0:
                  if (curChar != 45)
                     break;
                  if (kind > 58)
                     kind = 58;
                  { jjCheckNAdd(1); }
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0x0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  { jjCheckNAdd(1); }
                  break;
               case 3:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(4, 5); }
                  break;
               case 4:
                  if ((0xfffffbffffffffffL & l) != 0x0L)
                     { jjCheckNAddTwoStates(4, 5); }
                  break;
               case 5:
                  if (curChar == 42)
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 6:
                  if ((0xffff7bffffffffffL & l) != 0x0L)
                     { jjCheckNAddTwoStates(7, 5); }
                  break;
               case 7:
                  if ((0xfffffbffffffffffL & l) != 0x0L)
                     { jjCheckNAddTwoStates(7, 5); }
                  break;
               case 8:
                  if (curChar == 47 && kind > 59)
                     kind = 59;
                  break;
               case 9:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 12:
                  if (curChar == 58)
                     { jjAddStates(7, 9); }
                  break;
               case 14:
                  if ((0x3ff001800000000L & l) == 0x0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  { jjAddStates(20, 21); }
                  break;
               case 15:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 17:
                  if ((0x3ff001800000000L & l) == 0x0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  { jjCheckNAdd(19); }
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  { jjCheckNAddTwoStates(20, 21); }
                  break;
               case 21:
                  if (curChar == 46)
                     { jjCheckNAdd(22); }
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  { jjCheckNAdd(22); }
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  { jjCheckNAddTwoStates(23, 24); }
                  break;
               case 25:
                  if ((0x280000000000L & l) != 0x0L)
                     { jjAddStates(22, 23); }
                  break;
               case 26:
                  if (curChar == 46)
                     { jjCheckNAdd(27); }
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  { jjCheckNAdd(27); }
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  { jjCheckNAddStates(24, 26); }
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  { jjCheckNAdd(29); }
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  { jjCheckNAddTwoStates(30, 31); }
                  break;
               case 31:
                  if (curChar == 46)
                     { jjCheckNAdd(32); }
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  { jjCheckNAdd(32); }
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  { jjCheckNAddStates(27, 29); }
                  break;
               case 34:
                  if (curChar == 46)
                     { jjCheckNAdd(35); }
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  { jjCheckNAddTwoStates(35, 24); }
                  break;
               case 36:
                  if (curChar == 46)
                     { jjCheckNAddTwoStates(37, 38); }
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  { jjCheckNAdd(37); }
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  { jjCheckNAddTwoStates(38, 24); }
                  break;
               case 39:
                  if (curChar == 39)
                     { jjCheckNAddTwoStates(40, 41); }
                  break;
               case 40:
                  if ((0xffffff7fffffffffL & l) != 0x0L)
                     { jjCheckNAddTwoStates(40, 41); }
                  break;
               case 41:
                  if (curChar != 39)
                     break;
                  if (kind > 64)
                     kind = 64;
                  jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 42:
                  if (curChar == 39)
                     { jjCheckNAddTwoStates(43, 41); }
                  break;
               case 43:
                  if ((0xffffff7fffffffffL & l) != 0x0L)
                     { jjCheckNAddTwoStates(43, 41); }
                  break;
               case 44:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(45, 46); }
                  break;
               case 45:
                  if ((0xfffffffbffffdbffL & l) != 0x0L)
                     { jjCheckNAddTwoStates(45, 46); }
                  break;
               case 46:
                  if (curChar == 34 && kind > 65)
                     kind = 65;
                  break;
               case 47:
                  if (curChar == 46)
                     { jjCheckNAddTwoStates(48, 58); }
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  { jjCheckNAddTwoStates(48, 49); }
                  break;
               case 50:
                  if ((0x280000000000L & l) != 0x0L)
                     { jjAddStates(30, 31); }
                  break;
               case 51:
                  if (curChar == 46)
                     { jjCheckNAdd(52); }
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  { jjCheckNAdd(52); }
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  { jjCheckNAddStates(32, 34); }
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  { jjCheckNAdd(54); }
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  { jjCheckNAddTwoStates(55, 56); }
                  break;
               case 56:
                  if (curChar == 46)
                     { jjCheckNAdd(57); }
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  { jjCheckNAdd(57); }
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  { jjCheckNAdd(58); }
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  { jjCheckNAddStates(0, 6); }
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  { jjCheckNAddTwoStates(60, 49); }
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  { jjCheckNAddStates(35, 37); }
                  break;
               case 62:
                  if (curChar == 46)
                     { jjCheckNAdd(63); }
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  { jjCheckNAddTwoStates(63, 49); }
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  { jjCheckNAddTwoStates(64, 65); }
                  break;
               case 65:
                  if (curChar == 46)
                     { jjCheckNAdd(66); }
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  { jjCheckNAdd(66); }
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  { jjCheckNAdd(67); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
               case 10:
                  if ((0x7fffffe07fffffeL & l) == 0x0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  { jjCheckNAddTwoStates(10, 11); }
                  break;
               case 68:
                  if ((0x7fffffe87fffffeL & l) != 0x0L)
                  {
                     if (kind > 60)
                        kind = 60;
                     { jjCheckNAdd(11); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0x0L)
                  {
                     if (kind > 60)
                        kind = 60;
                     { jjCheckNAddTwoStates(10, 11); }
                  }
                  break;
               case 18:
               case 13:
                  if ((0x7fffffe07fffffeL & l) == 0x0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  { jjCheckNAddStates(38, 40); }
                  break;
               case 1:
                  if (kind > 58)
                     kind = 58;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  { jjCheckNAddTwoStates(4, 5); }
                  break;
               case 6:
               case 7:
                  { jjCheckNAddTwoStates(7, 5); }
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) == 0x0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  { jjCheckNAdd(11); }
                  break;
               case 14:
                  if ((0x7fffffe87fffffeL & l) == 0x0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  { jjCheckNAddTwoStates(14, 15); }
                  break;
               case 16:
                  if ((0x7fffffe07fffffeL & l) == 0x0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  { jjCheckNAddTwoStates(16, 17); }
                  break;
               case 17:
                  if ((0x7fffffe87fffffeL & l) == 0x0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  { jjCheckNAdd(17); }
                  break;
               case 24:
                  if ((0x2000000020L & l) != 0x0L)
                     { jjAddStates(41, 43); }
                  break;
               case 40:
                  { jjCheckNAddTwoStates(40, 41); }
                  break;
               case 43:
                  { jjCheckNAddTwoStates(43, 41); }
                  break;
               case 45:
                  { jjAddStates(44, 45); }
                  break;
               case 49:
                  if ((0x2000000020L & l) != 0x0L)
                     { jjAddStates(46, 48); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddTwoStates(4, 5); }
                  break;
               case 6:
               case 7:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddTwoStates(7, 5); }
                  break;
               case 40:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddTwoStates(40, 41); }
                  break;
               case 43:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddTwoStates(43, 41); }
                  break;
               case 45:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(44, 45); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      i = jjnewStateCnt;
      jjnewStateCnt = startsAt;
      startsAt = 68 - jjnewStateCnt;
      if (i == startsAt)
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, "\44", null, null, 
null, null, null, null, null, null, null, "\50", "\54", "\51", "\73", "\53", "\55", 
"\174\174", "\52", "\57", "\56", "\75", "\41", "\43", "\76", "\74", null, "\72\75", null, 
"\75\76", null, null, null, "\56\52", null, null, null, null, null, null, null, null, 
null, null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = im == null ? input_stream.getImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   t.image = curTokenImage;

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   60, 61, 62, 49, 64, 65, 67, 13, 18, 36, 19, 20, 21, 23, 33, 34, 
   24, 5, 6, 8, 14, 15, 26, 28, 29, 30, 31, 33, 34, 24, 51, 53, 
   54, 55, 56, 61, 62, 49, 13, 14, 15, 25, 26, 28, 45, 46, 50, 51, 
   53, 
};

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop:
  for (;;)
  {
   try
   {
      curChar = input_stream.beginToken();
   }
   catch(final Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   try {
     input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0x0L)
         curChar = input_stream.beginToken();
   }
   catch (final java.io.IOException e1) {
     continue EOFLoop;
   }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try {
     input_stream.readChar();
     input_stream.backup(1);
   }
   catch (final java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.getImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.getImage();
   }
   throw new TokenMgrException(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrException.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public ParserTokenManager(SimpleCharStream stream){
    input_stream = stream;
  }

  /** Constructor. */
  public ParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 68; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrException("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrException.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x907fffffffffffe1L, 0xffffffffffffL, 
};
static final long[] jjtoSkip = {
   0xc0000000000001eL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0xc00000000000000L, 0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[68];
    private final int[] jjstateSet = new int[2 * 68];
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
