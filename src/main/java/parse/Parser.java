/* Parser.java */
/* Generated by: ParserGeneratorCC: Do not edit this line. Parser.java */
package parse;

import io.questdb.griffin.model.ExpressionNode;
import io.questdb.std.ObjectPool;

public class Parser implements ParserConstants {
  ObjectPool<ExpressionNode> sqlNodePool;
  public Parser() {
    this.sqlNodePool = new ObjectPool<>(ExpressionNode.FACTORY, 100);
  }

  public static ExpressionNode parse(String args) throws Exception
  {
    Parser parse = new Parser(new java.io.StringReader(args));
    ExpressionNode rst = parse.SQLStatement();
    return rst;
  }

  public ExpressionNode collapseFunctionRightLeft(CharSequence name, ExpressionNode r, ExpressionNode l, Token token) {
    ExpressionNode parent = sqlNodePool.next().of(ExpressionNode.FUNCTION, name, Integer.MIN_VALUE, token.beginColumn);
  }

  final public ExpressionNode BindVariable() throws ParseException {
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case S_BIND:{
      jj_consume_token(S_BIND);
      break;
      }
    case 64:{
      jj_consume_token(64);
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case S_NUMBER:{
        jj_consume_token(S_NUMBER);
        break;
        }
      case S_IDENTIFIER:{
        jj_consume_token(S_IDENTIFIER);
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public ExpressionNode BasicDataTypeDefinition() throws ParseException {
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case K_BOOLEAN:{
      jj_consume_token(K_BOOLEAN);
      break;
      }
    case 65:{
      jj_consume_token(65);
      break;
      }
    case 66:{
      jj_consume_token(66);
      break;
      }
    case K_CHAR:{
      jj_consume_token(K_CHAR);
      break;
      }
    case 67:{
      jj_consume_token(67);
      break;
      }
    case K_FLOAT:{
      jj_consume_token(K_FLOAT);
      break;
      }
    case 68:{
      jj_consume_token(68);
      break;
      }
    case K_STRING:{
      jj_consume_token(K_STRING);
      break;
      }
    case 69:{
      jj_consume_token(69);
      break;
      }
    case K_DATE:{
      jj_consume_token(K_DATE);
      break;
      }
    case 70:{
      jj_consume_token(70);
      break;
      }
    case K_DOUBLE:{
      jj_consume_token(K_DOUBLE);
      break;
      }
    case 71:{
      jj_consume_token(71);
      break;
      }
    case 72:{
      jj_consume_token(72);
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public ExpressionNode SQLStatement() throws ParseException {ExpressionNode e;
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case 73:{
      e = InsertStatement();
{if ("" != null) return e;}
      break;
      }
    case K_SELECT:
    case 74:{
      e = QueryStatement();
{if ("" != null) return e;}
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new IllegalStateException ("Missing return statement in function");
}

  final public ExpressionNode InsertStatement() throws ParseException {
    jj_consume_token(73);
    jj_consume_token(K_INTO);
    TableName();
    if (jj_2_1(2)) {
      jj_consume_token(74);
      TableColumn();
      label_1:
      while (true) {
        switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
        case 75:{
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          break label_1;
        }
        jj_consume_token(75);
        TableColumn();
      }
      jj_consume_token(76);
    } else {
      ;
    }
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case K_VALUES:{
      jj_consume_token(K_VALUES);
      jj_consume_token(74);
      SqlExpressionList();
      jj_consume_token(76);
      break;
      }
    case K_SELECT:
    case 74:{
      SubQuery();
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(77);
}

  final public ExpressionNode QueryStatement() throws ParseException {
    SelectStatement();
    jj_consume_token(77);
}

  final public ExpressionNode SqlExpression() throws ParseException {ExpressionNode r, l;
    r = SqlAndExpression();
    label_2:
    while (true) {
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case K_OR:{
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        break label_2;
      }
      jj_consume_token(K_OR);
      l = SqlAndExpression();
ExpressionNode r1 = sqlNodePool.next().of(ExpressionNode.FUNCTION, "OR", Integer.MIN_VALUE, token.beginColumn);
        r1.rhs = r;
        r1.lhs = l;
        r = r1;
    }
{if ("" != null) return r;}
    throw new IllegalStateException ("Missing return statement in function");
}

  final public ExpressionNode SqlAndExpression() throws ParseException {ExpressionNode r, l;
    r = SqlUnaryLogicalExpression();
    label_3:
    while (true) {
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case K_AND:{
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
      jj_consume_token(K_AND);
      l = SqlUnaryLogicalExpression();
r = collapseFunctionRightLeft("AND", r, l, token);
    }
{if ("" != null) return r;}
    throw new IllegalStateException ("Missing return statement in function");
}

  final public ExpressionNode SqlUnaryLogicalExpression() throws ParseException {
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case K_NOT:{
      jj_consume_token(K_NOT);
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    SqlRelationalExpression();
}

  final public ExpressionNode SqlRelationalExpression() throws ParseException {
    SqlSimpleExpression();
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case K_BETWEEN:
    case K_IN:
    case K_IS:
    case K_LIKE:
    case K_NOT:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:{
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:{
        Relop();
        SqlSimpleExpression();
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        if (jj_2_2(2)) {
          SqlInClause();
        } else if (jj_2_3(2)) {
          SqlBetweenClause();
        } else if (jj_2_4(2)) {
          SqlLikeClause();
        } else {
          switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
          case K_IS:{
            IsNullClause();
            break;
            }
          default:
            jj_la1[10] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      ;
    }
}

  final public ExpressionNode SqlExpressionList() throws ParseException {
    SqlExpression();
    label_4:
    while (true) {
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case 75:{
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        break label_4;
      }
      jj_consume_token(75);
      SqlExpression();
    }
}

  final public ExpressionNode SqlInClause() throws ParseException {
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case K_NOT:{
      jj_consume_token(K_NOT);
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    jj_consume_token(K_IN);
    jj_consume_token(74);
    SqlExpressionList();
    jj_consume_token(76);
}

  final public ExpressionNode SqlBetweenClause() throws ParseException {
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case K_NOT:{
      jj_consume_token(K_NOT);
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    jj_consume_token(K_BETWEEN);
    SqlSimpleExpression();
    jj_consume_token(K_AND);
    SqlSimpleExpression();
}

  final public ExpressionNode SqlLikeClause() throws ParseException {
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case K_NOT:{
      jj_consume_token(K_NOT);
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    jj_consume_token(K_LIKE);
    SqlSimpleExpression();
}

  final public ExpressionNode IsNullClause() throws ParseException {
    jj_consume_token(K_IS);
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case K_NOT:{
      jj_consume_token(K_NOT);
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    jj_consume_token(K_NULL);
}

  final public ExpressionNode SqlSimpleExpression() throws ParseException {
    SqlMultiplicativeExpression();
    label_5:
    while (true) {
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case 78:
      case 79:
      case 80:{
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        break label_5;
      }
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case 78:{
        jj_consume_token(78);
        break;
        }
      case 79:{
        jj_consume_token(79);
        break;
        }
      case 80:{
        jj_consume_token(80);
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      SqlMultiplicativeExpression();
    }
}

  final public ExpressionNode SqlMultiplicativeExpression() throws ParseException {
    SqlUnaryExpression();
    label_6:
    while (true) {
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case S_IDENTIFIER:
      case 81:
      case 82:{
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        break label_6;
      }
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case 81:{
        jj_consume_token(81);
        break;
        }
      case 82:{
        jj_consume_token(82);
        break;
        }
      case S_IDENTIFIER:{
        ID("MOD");
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      SqlUnaryExpression();
    }
}

  final public ExpressionNode SqlUnaryExpression() throws ParseException {
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case 78:
    case 79:{
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case 78:{
        jj_consume_token(78);
        break;
        }
      case 79:{
        jj_consume_token(79);
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      SqlPrimaryExpression();
      break;
      }
    case K_CASE:
    case K_CAST:
    case K_NULL:
    case S_NUMBER:
    case S_IDENTIFIER:
    case S_BIND:
    case S_CHAR_LITERAL:
    case S_QUOTED_IDENTIFIER:
    case 64:
    case 74:
    case 83:{
      SqlPrimaryExpression();
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public ExpressionNode SqlPrimaryExpression() throws ParseException {
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case S_NUMBER:{
      jj_consume_token(S_NUMBER);
      break;
      }
    case S_CHAR_LITERAL:{
      jj_consume_token(S_CHAR_LITERAL);
      break;
      }
    case K_NULL:{
      jj_consume_token(K_NULL);
      break;
      }
    case K_CASE:{
      SQLCaseExpression();
      break;
      }
    case 74:{
      jj_consume_token(74);
      if (jj_2_5(3)) {
        SelectStatement();
      } else {
        switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
        case K_CASE:
        case K_CAST:
        case K_NOT:
        case K_NULL:
        case S_NUMBER:
        case S_IDENTIFIER:
        case S_BIND:
        case S_CHAR_LITERAL:
        case S_QUOTED_IDENTIFIER:
        case 64:
        case 74:
        case 78:
        case 79:
        case 83:{
          SqlExpression();
          break;
          }
        default:
          jj_la1[23] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(76);
      break;
      }
    case S_BIND:
    case 64:{
      BindVariable();
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      if (jj_2_6(2)) {
        SQLCastExpression();
      } else if (jj_2_7(2147483647)) {
        IntervalExpression();
      } else if (jj_2_8(2)) {
        switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
        case S_IDENTIFIER:{
          jj_consume_token(S_IDENTIFIER);
          break;
          }
        case 83:{
          jj_consume_token(83);
          break;
          }
        default:
          jj_la1[24] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(84);
        ID("FOUND|NOTFOUND|ISOPEN|ROWCOUNT");
      } else if (jj_2_9(2147483647)) {
        FunctionCall();
      } else {
        switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
        case S_IDENTIFIER:
        case S_QUOTED_IDENTIFIER:{
          ObjectReference();
          break;
          }
        default:
          jj_la1[26] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
}

  final public ExpressionNode TableColumn() throws ParseException {
    ObjectReference();
}

  final public ExpressionNode ObjectName() throws ParseException {
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case S_IDENTIFIER:{
      jj_consume_token(S_IDENTIFIER);
{if ("" != null) return this.sqlNodePool.expressionNodePool.next().of(ExpressionNode.LITERAL, token.image, token.beginColumn);}
      break;
      }
    case S_QUOTED_IDENTIFIER:{
      jj_consume_token(S_QUOTED_IDENTIFIER);
{if ("" != null) return this.sqlNodePool.expressionNodePool.next().of(ExpressionNode.LITERAL, token.image.substring(1, token.image.length() - 1));}
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new IllegalStateException ("Missing return statement in function");
}

  final public CharSequence TNSName() throws ParseException {StringBuilder name = new StringBuilder();
    jj_consume_token(S_IDENTIFIER);
name.append(token.image);
    label_7:
    while (true) {
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case 85:{
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        break label_7;
      }
      jj_consume_token(85);
      jj_consume_token(S_IDENTIFIER);
name.append(".").append(token.image);
    }
{if ("" != null) return name.toString();}
    throw new IllegalStateException ("Missing return statement in function");
}

  final public ExpressionNode Relop() throws ParseException {
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case 86:{
      jj_consume_token(86);
      break;
      }
    case 87:{
      jj_consume_token(87);
      jj_consume_token(86);
      break;
      }
    case 88:{
      jj_consume_token(88);
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      if (jj_2_10(2)) {
        jj_consume_token(89);
        jj_consume_token(86);
      } else {
        switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
        case 89:{
          jj_consume_token(89);
          break;
          }
        default:
          jj_la1[30] = jj_gen;
          if (jj_2_11(2)) {
            jj_consume_token(90);
            jj_consume_token(89);
          } else if (jj_2_12(2)) {
            jj_consume_token(90);
            jj_consume_token(86);
          } else {
            switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
            case 90:{
              jj_consume_token(90);
              break;
              }
            default:
              jj_la1[31] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
}

  final public ExpressionNode TableName() throws ParseException {CharSequence s;
    // schema.table@link
        s = ObjectName();
name.append(s);
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case 85:{
      jj_consume_token(85);
      s = ObjectName();
name.append(".").append(s);
      break;
      }
    default:
      jj_la1[32] = jj_gen;
      ;
    }
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case 91:{
      jj_consume_token(91);
      s = TNSName();
name.append("@").append(s);
      break;
      }
    default:
      jj_la1[33] = jj_gen;
      ;
    }
}

  final public ExpressionNode ParameterList() throws ParseException {
    Parameter();
    label_8:
    while (true) {
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case 75:{
        break;
        }
      default:
        jj_la1[34] = jj_gen;
        break label_8;
      }
      jj_consume_token(75);
      Parameter();
    }
}

  final public ExpressionNode NumOrID() throws ParseException {
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case S_IDENTIFIER:{
      jj_consume_token(S_IDENTIFIER);
      break;
      }
    case S_NUMBER:
    case 78:
    case 79:{
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case 78:
      case 79:{
        switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
        case 78:{
          jj_consume_token(78);
          break;
          }
        case 79:{
          jj_consume_token(79);
          break;
          }
        default:
          jj_la1[35] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[36] = jj_gen;
        ;
      }
      jj_consume_token(S_NUMBER);
      break;
      }
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public ExpressionNode Parameter() throws ParseException {
    jj_consume_token(S_IDENTIFIER);
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case K_BOOLEAN:
    case K_CHAR:
    case K_DATE:
    case K_DOUBLE:
    case K_FLOAT:
    case K_IN:
    case K_STRING:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 92:{
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case K_IN:{
        jj_consume_token(K_IN);
        break;
        }
      default:
        jj_la1[38] = jj_gen;
        ;
      }
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case 92:{
        jj_consume_token(92);
        break;
        }
      default:
        jj_la1[39] = jj_gen;
        ;
      }
      BasicDataTypeDefinition();
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case 93:
      case 94:{
        switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
        case 93:{
          jj_consume_token(93);
          break;
          }
        case 94:{
          jj_consume_token(94);
          break;
          }
        default:
          jj_la1[40] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        SqlExpression();
        break;
        }
      default:
        jj_la1[41] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[42] = jj_gen;
      ;
    }
}

  final public ExpressionNode Arguments() throws ParseException {
    Argument();
    label_9:
    while (true) {
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case 75:{
        break;
        }
      default:
        jj_la1[43] = jj_gen;
        break label_9;
      }
      jj_consume_token(75);
      Argument();
    }
}

  final public ExpressionNode Argument() throws ParseException {
    if (jj_2_13(2)) {
      jj_consume_token(S_IDENTIFIER);
      jj_consume_token(95);
    } else {
      ;
    }
    SqlExpression();
}

  final public ExpressionNode SelectStatement() throws ParseException {
    SelectWithoutOrder();
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case K_ORDER:{
      OrderByClause();
      break;
      }
    default:
      jj_la1[44] = jj_gen;
      ;
    }
}

  final public ExpressionNode SelectWithoutOrder() throws ParseException {
    SelectSet();
    label_10:
    while (true) {
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case K_UNION:
      case 96:
      case 97:{
        break;
        }
      default:
        jj_la1[45] = jj_gen;
        break label_10;
      }
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case K_UNION:{
        jj_consume_token(K_UNION);
        switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
        case K_ALL:{
          jj_consume_token(K_ALL);
          break;
          }
        default:
          jj_la1[46] = jj_gen;
          ;
        }
        break;
        }
      case 96:{
        jj_consume_token(96);
        break;
        }
      case 97:{
        jj_consume_token(97);
        break;
        }
      default:
        jj_la1[47] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      SelectSet();
    }
}

  final public ExpressionNode SelectSet() throws ParseException {
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case K_SELECT:{
      Select();
      break;
      }
    case 74:{
      jj_consume_token(74);
      SubQuery();
      jj_consume_token(76);
      break;
      }
    default:
      jj_la1[48] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public ExpressionNode Select() throws ParseException {
    jj_consume_token(K_SELECT);
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case K_ALL:
    case K_DISTINCT:
    case 98:{
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case K_ALL:{
        jj_consume_token(K_ALL);
        break;
        }
      case K_DISTINCT:{
        jj_consume_token(K_DISTINCT);
        break;
        }
      case 98:{
        jj_consume_token(98);
        break;
        }
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[50] = jj_gen;
      ;
    }
    SelectList();
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case K_INTO:{
      IntoClause();
      break;
      }
    default:
      jj_la1[51] = jj_gen;
      ;
    }
    FromClause();
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case K_WHERE:{
      WhereClause();
      break;
      }
    default:
      jj_la1[52] = jj_gen;
      ;
    }
}

  final public ExpressionNode SelectList() throws ParseException {
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case 81:{
      jj_consume_token(81);
      break;
      }
    default:
      jj_la1[54] = jj_gen;
      if (jj_2_14(1)) {
        SelectItem();
        label_11:
        while (true) {
          switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
          case 75:{
            break;
            }
          default:
            jj_la1[53] = jj_gen;
            break label_11;
          }
          jj_consume_token(75);
          SelectItem();
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

  final public ExpressionNode SelectItem() throws ParseException {
    if (jj_2_15(2)) {
      ObjectName();
      jj_consume_token(99);
    } else if (jj_2_16(4)) {
      ObjectName();
      jj_consume_token(85);
      ObjectName();
      jj_consume_token(99);
    } else if (jj_2_17(1)) {
      SQLSimpleExpression();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case K_AS:
    case S_IDENTIFIER:
    case S_QUOTED_IDENTIFIER:
    case 100:
    case 101:{
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case K_AS:{
        jj_consume_token(K_AS);
        break;
        }
      default:
        jj_la1[55] = jj_gen;
        ;
      }
      SelectItemAlias();
      break;
      }
    default:
      jj_la1[56] = jj_gen;
      ;
    }
}

  final public ExpressionNode SelectItemAlias() throws ParseException {
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case S_IDENTIFIER:
    case S_QUOTED_IDENTIFIER:{
      ObjectName();
      break;
      }
    case 100:{
      jj_consume_token(100);
      break;
      }
    case 101:{
      jj_consume_token(101);
      break;
      }
    default:
      jj_la1[57] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public ExpressionNode AnalyticFunction() throws ParseException {
    FunctionCall();
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case 102:{
      jj_consume_token(102);
      jj_consume_token(74);
      AnalyticClause();
      jj_consume_token(76);
      break;
      }
    default:
      jj_la1[58] = jj_gen;
      ;
    }
}

  final public ExpressionNode AnalyticClause() throws ParseException {
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case K_PARTITION:{
      QueryPartitionClause();
      break;
      }
    default:
      jj_la1[59] = jj_gen;
      ;
    }
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case K_ORDER:{
      OrderByClause();
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case 103:
      case 104:{
        WindowingClause();
        break;
        }
      default:
        jj_la1[60] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[61] = jj_gen;
      ;
    }
}

  final public ExpressionNode QueryPartitionClause() throws ParseException {
    jj_consume_token(K_PARTITION);
    jj_consume_token(K_BY);
    SQLExpression();
    label_12:
    while (true) {
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case 75:{
        break;
        }
      default:
        jj_la1[62] = jj_gen;
        break label_12;
      }
      jj_consume_token(75);
      SQLExpression();
    }
}

  final public ExpressionNode WindowingClause() throws ParseException {
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case 103:{
      jj_consume_token(103);
      break;
      }
    case 104:{
      jj_consume_token(104);
      break;
      }
    default:
      jj_la1[63] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case 105:{
      jj_consume_token(105);
      jj_consume_token(106);
      break;
      }
    default:
      jj_la1[66] = jj_gen;
      if (jj_2_20(1)) {
        SQLSimpleExpression();
        ID("PRECEDING");
      } else {
        switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
        case K_BETWEEN:{
          jj_consume_token(K_BETWEEN);
          switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
          case 105:{
            jj_consume_token(105);
            jj_consume_token(106);
            break;
            }
          default:
            jj_la1[64] = jj_gen;
            if (jj_2_18(1)) {
              SQLSimpleExpression();
              ID("PRECEDING|FOLLOWING");
            } else {
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          jj_consume_token(K_AND);
          switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
          case 105:{
            jj_consume_token(105);
            jj_consume_token(106);
            break;
            }
          default:
            jj_la1[65] = jj_gen;
            if (jj_2_19(1)) {
              SQLSimpleExpression();
              ID("PRECEDING|FOLLOWING");
            } else {
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          break;
          }
        default:
          jj_la1[67] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
}

  final public ExpressionNode IntoClause() throws ParseException {
    jj_consume_token(K_INTO);
    DataItem();
    label_13:
    while (true) {
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case 75:{
        break;
        }
      default:
        jj_la1[68] = jj_gen;
        break label_13;
      }
      jj_consume_token(75);
      DataItem();
    }
}

  final public ExpressionNode DataItem() throws ParseException {
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case S_IDENTIFIER:{
      jj_consume_token(S_IDENTIFIER);
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case 85:{
        jj_consume_token(85);
        jj_consume_token(S_IDENTIFIER);
        break;
        }
      default:
        jj_la1[69] = jj_gen;
        ;
      }
      break;
      }
    case S_BIND:
    case 64:{
      BindVariable();
      break;
      }
    default:
      jj_la1[70] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case 74:{
      jj_consume_token(74);
      SqlSimpleExpression();
      jj_consume_token(76);
      break;
      }
    default:
      jj_la1[71] = jj_gen;
      ;
    }
}

  final public ExpressionNode FromClause() throws ParseException {
    jj_consume_token(K_FROM);
    TableReference();
    label_14:
    while (true) {
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case 75:{
        break;
        }
      default:
        jj_la1[72] = jj_gen;
        break label_14;
      }
      jj_consume_token(75);
      TableReference();
    }
}

  final public ExpressionNode TableReference() throws ParseException {
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case 107:{
      jj_consume_token(107);
      jj_consume_token(74);
      QueryTableExpression();
      jj_consume_token(76);
      break;
      }
    case K_TABLE:
    case S_IDENTIFIER:
    case S_BIND:
    case S_QUOTED_IDENTIFIER:
    case 64:
    case 74:{
      QueryTableExpression();
      break;
      }
    default:
      jj_la1[73] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public ExpressionNode QueryTableExpression() throws ParseException {
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case S_IDENTIFIER:
    case S_QUOTED_IDENTIFIER:{
      TableName();
      break;
      }
    case K_TABLE:{
      TableCollectionExpression();
      break;
      }
    default:
      jj_la1[74] = jj_gen;
      if (jj_2_21(3)) {
        jj_consume_token(74);
        SubQuery();
        jj_consume_token(76);
      } else {
        switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
        case 74:{
          jj_consume_token(74);
          TableReference();
          jj_consume_token(76);
          break;
          }
        case S_BIND:
        case 64:{
          BindVariable();
          break;
          }
        default:
          jj_la1[75] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case 108:{
      jj_consume_token(108);
      jj_consume_token(74);
      jj_consume_token(S_NUMBER);
      jj_consume_token(75);
      jj_consume_token(S_IDENTIFIER);
      jj_consume_token(75);
      jj_consume_token(S_IDENTIFIER);
      jj_consume_token(76);
      break;
      }
    default:
      jj_la1[76] = jj_gen;
      ;
    }
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case K_SAMPLE:{
      jj_consume_token(K_SAMPLE);
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case S_IDENTIFIER:{
        ID("BLOCK");
        break;
        }
      default:
        jj_la1[77] = jj_gen;
        ;
      }
      jj_consume_token(74);
      jj_consume_token(S_NUMBER);
      jj_consume_token(76);
      break;
      }
    default:
      jj_la1[78] = jj_gen;
      ;
    }
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case S_IDENTIFIER:
    case S_QUOTED_IDENTIFIER:{
      ObjectName();
      break;
      }
    default:
      jj_la1[79] = jj_gen;
      ;
    }
    label_15:
    while (true) {
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case K_FULL:
      case K_INNER:
      case K_LEFT:
      case 110:{
        break;
        }
      default:
        jj_la1[80] = jj_gen;
        break label_15;
      }
      Join();
    }
}

  final public ExpressionNode TableCollectionExpression() throws ParseException {
    jj_consume_token(K_TABLE);
    jj_consume_token(74);
    SQLSimpleExpression();
    jj_consume_token(76);
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case 74:{
      jj_consume_token(74);
      jj_consume_token(78);
      jj_consume_token(76);
      break;
      }
    default:
      jj_la1[81] = jj_gen;
      ;
    }
}

  final public ExpressionNode Join() throws ParseException {
    JoinType();
    ID("JOIN");
    TableReference();
    jj_consume_token(109);
    SQLExpression();
}

  final public ExpressionNode JoinType() throws ParseException {
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case K_INNER:{
      jj_consume_token(K_INNER);
      break;
      }
    case K_FULL:
    case K_LEFT:
    case 110:{
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case K_LEFT:{
        jj_consume_token(K_LEFT);
        break;
        }
      case 110:{
        jj_consume_token(110);
        break;
        }
      case K_FULL:{
        jj_consume_token(K_FULL);
        break;
        }
      default:
        jj_la1[82] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      ID("OUTER");
      break;
      }
    default:
      jj_la1[83] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public ExpressionNode ColumnName() throws ParseException {
    jj_consume_token(S_IDENTIFIER);
}

  final public ExpressionNode WhereClause() throws ParseException {
    jj_consume_token(K_WHERE);
    SQLExpression();
}

  final public ExpressionNode OrderByClause() throws ParseException {
    jj_consume_token(K_ORDER);
    jj_consume_token(K_BY);
    OrderByExpression();
    label_16:
    while (true) {
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case 75:{
        break;
        }
      default:
        jj_la1[84] = jj_gen;
        break label_16;
      }
      jj_consume_token(75);
      OrderByExpression();
    }
}

  final public ExpressionNode OrderByExpression() throws ParseException {
    SQLSimpleExpression();
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case K_ASC:
    case K_DESC:{
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case K_ASC:{
        jj_consume_token(K_ASC);
        break;
        }
      case K_DESC:{
        jj_consume_token(K_DESC);
        break;
        }
      default:
        jj_la1[85] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[86] = jj_gen;
      ;
    }
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case 111:{
      jj_consume_token(111);
      ID("LAST");
      break;
      }
    default:
      jj_la1[87] = jj_gen;
      ;
    }
}

  final public ExpressionNode SQLExpression() throws ParseException {
    SQLAndExpression();
    label_17:
    while (true) {
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case K_OR:{
        break;
        }
      default:
        jj_la1[88] = jj_gen;
        break label_17;
      }
      jj_consume_token(K_OR);
      SQLAndExpression();
    }
}

  final public ExpressionNode SQLAndExpression() throws ParseException {
    SQLUnaryLogicalExpression();
    label_18:
    while (true) {
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case K_AND:{
        break;
        }
      default:
        jj_la1[89] = jj_gen;
        break label_18;
      }
      jj_consume_token(K_AND);
      SQLUnaryLogicalExpression();
    }
}

  final public ExpressionNode SQLUnaryLogicalExpression() throws ParseException {
    if (jj_2_22(2)) {
      ExistsClause();
    } else if (jj_2_23(1)) {
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case K_NOT:{
        jj_consume_token(K_NOT);
        break;
        }
      default:
        jj_la1[90] = jj_gen;
        ;
      }
      SQLRelationalExpression();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public ExpressionNode ExistsClause() throws ParseException {
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case K_NOT:{
      jj_consume_token(K_NOT);
      break;
      }
    default:
      jj_la1[91] = jj_gen;
      ;
    }
    jj_consume_token(112);
    jj_consume_token(74);
    SubQuery();
    jj_consume_token(76);
}

  final public ExpressionNode SQLRelationalExpression() throws ParseException {
    if (jj_2_24(2147483647)) {
      jj_consume_token(74);
      SQLExpressionList();
      jj_consume_token(76);
    } else if (jj_2_25(1)) {
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case 113:{
        jj_consume_token(113);
        break;
        }
      default:
        jj_la1[92] = jj_gen;
        ;
      }
      SQLSimpleExpression();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case K_BETWEEN:
    case K_IN:
    case K_IS:
    case K_LIKE:
    case K_NOT:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:{
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:{
        SQLRelationalOperatorExpression();
        break;
        }
      default:
        jj_la1[93] = jj_gen;
        if (jj_2_26(2)) {
          SQLInClause();
        } else if (jj_2_27(2)) {
          SQLBetweenClause();
        } else if (jj_2_28(2)) {
          SQLLikeClause();
        } else {
          switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
          case K_IS:{
            IsNullClause();
            break;
            }
          default:
            jj_la1[94] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      break;
      }
    default:
      jj_la1[95] = jj_gen;
      ;
    }
}

  final public ExpressionNode SQLExpressionList() throws ParseException {
    SQLExpression();
    label_19:
    while (true) {
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case 75:{
        break;
        }
      default:
        jj_la1[96] = jj_gen;
        break label_19;
      }
      jj_consume_token(75);
      SQLExpression();
    }
}

  final public ExpressionNode SQLRelationalOperatorExpression() throws ParseException {
    Relop();
    if (jj_2_29(2147483647)) {
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case K_ALL:
      case K_ANY:{
        switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
        case K_ALL:{
          jj_consume_token(K_ALL);
          break;
          }
        case K_ANY:{
          jj_consume_token(K_ANY);
          break;
          }
        default:
          jj_la1[97] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[98] = jj_gen;
        ;
      }
      jj_consume_token(74);
      SubQuery();
      jj_consume_token(76);
    } else if (jj_2_30(1)) {
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case 113:{
        jj_consume_token(113);
        break;
        }
      default:
        jj_la1[99] = jj_gen;
        ;
      }
      SQLSimpleExpression();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public ExpressionNode SQLInClause() throws ParseException {
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case K_NOT:{
      jj_consume_token(K_NOT);
      break;
      }
    default:
      jj_la1[100] = jj_gen;
      ;
    }
    jj_consume_token(K_IN);
    jj_consume_token(74);
    if (jj_2_31(3)) {
      SubQuery();
    } else if (jj_2_32(1)) {
      SQLExpressionList();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(76);
}

  final public ExpressionNode SQLBetweenClause() throws ParseException {
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case K_NOT:{
      jj_consume_token(K_NOT);
      break;
      }
    default:
      jj_la1[101] = jj_gen;
      ;
    }
    jj_consume_token(K_BETWEEN);
    SQLSimpleExpression();
    jj_consume_token(K_AND);
    SQLSimpleExpression();
}

  final public ExpressionNode SQLLikeClause() throws ParseException {
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case K_NOT:{
      jj_consume_token(K_NOT);
      break;
      }
    default:
      jj_la1[102] = jj_gen;
      ;
    }
    jj_consume_token(K_LIKE);
    SQLSimpleExpression();
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case 114:{
      jj_consume_token(114);
      SQLSimpleExpression();
      break;
      }
    default:
      jj_la1[103] = jj_gen;
      ;
    }
}

  final public ExpressionNode SQLSimpleExpression() throws ParseException {
    SQLMultiplicativeExpression();
    label_20:
    while (true) {
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case 78:
      case 79:
      case 80:{
        break;
        }
      default:
        jj_la1[104] = jj_gen;
        break label_20;
      }
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case 78:{
        jj_consume_token(78);
        break;
        }
      case 79:{
        jj_consume_token(79);
        break;
        }
      case 80:{
        jj_consume_token(80);
        break;
        }
      default:
        jj_la1[105] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      SQLMultiplicativeExpression();
    }
}

  final public ExpressionNode SQLMultiplicativeExpression() throws ParseException {
    SQLUnaryExpression();
    label_21:
    while (true) {
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case 81:
      case 82:{
        break;
        }
      default:
        jj_la1[106] = jj_gen;
        break label_21;
      }
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case 81:{
        jj_consume_token(81);
        break;
        }
      case 82:{
        jj_consume_token(82);
        break;
        }
      default:
        jj_la1[107] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      SQLUnaryExpression();
    }
}

  final public ExpressionNode SQLUnaryExpression() throws ParseException {
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case 78:
    case 79:{
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case 78:{
        jj_consume_token(78);
        break;
        }
      case 79:{
        jj_consume_token(79);
        break;
        }
      default:
        jj_la1[108] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[109] = jj_gen;
      ;
    }
    SQLPrimaryExpression();
}

  final public ExpressionNode SQLPrimaryExpression() throws ParseException {
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case S_NUMBER:{
      jj_consume_token(S_NUMBER);
      break;
      }
    case S_CHAR_LITERAL:{
      jj_consume_token(S_CHAR_LITERAL);
      break;
      }
    case K_NULL:{
      jj_consume_token(K_NULL);
      break;
      }
    case K_CASE:{
      SQLCaseExpression();
      break;
      }
    case 74:{
      jj_consume_token(74);
      if (jj_2_33(3)) {
        SelectStatement();
      } else if (jj_2_34(1)) {
        SQLExpression();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(76);
      break;
      }
    case S_BIND:
    case 64:{
      BindVariable();
      break;
      }
    default:
      jj_la1[110] = jj_gen;
      if (jj_2_35(2)) {
        SQLCastExpression();
      } else if (jj_2_36(2147483647)) {
        IntervalExpression();
      } else if (jj_2_37(2147483647)) {
        OuterJoinExpression();
      } else if (seeAnalyticFunction()) {
        AnalyticFunction();
      } else if (jj_2_38(2147483647)) {
        FunctionCall();
      } else {
        switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
        case S_IDENTIFIER:
        case S_QUOTED_IDENTIFIER:{
          TableColumn();
          break;
          }
        default:
          jj_la1[111] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
}

  final public ExpressionNode SQLCaseExpression() throws ParseException {
    jj_consume_token(K_CASE);
    if (jj_2_39(1)) {
      SQLSimpleExpression();
      label_22:
      while (true) {
        switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
        case 101:{
          break;
          }
        default:
          jj_la1[112] = jj_gen;
          break label_22;
        }
        jj_consume_token(101);
        SQLSimpleExpression();
        jj_consume_token(115);
        SQLSimpleExpression();
      }
    } else {
      label_23:
      while (true) {
        switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
        case 101:{
          break;
          }
        default:
          jj_la1[113] = jj_gen;
          break label_23;
        }
        jj_consume_token(101);
        SQLExpression();
        jj_consume_token(115);
        SQLSimpleExpression();
      }
    }
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case K_ELSE:{
      jj_consume_token(K_ELSE);
      SQLSimpleExpression();
      break;
      }
    default:
      jj_la1[114] = jj_gen;
      ;
    }
    jj_consume_token(K_END);
}

  final public ExpressionNode SQLCastExpression() throws ParseException {
    jj_consume_token(K_CAST);
    jj_consume_token(74);
    SQLExpression();
    jj_consume_token(K_AS);
    BasicDataTypeDefinition();
    jj_consume_token(76);
}

  final public ExpressionNode IntervalExpression() throws ParseException {
    ID("INTERVAL");
    SQLSimpleExpression();
    if ("DAY".equalsIgnoreCase(getToken(1).image)) {
      ID("DAY");
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case 74:{
        jj_consume_token(74);
        jj_consume_token(S_NUMBER);
        jj_consume_token(76);
        break;
        }
      default:
        jj_la1[115] = jj_gen;
        ;
      }
      jj_consume_token(116);
      ID("SECOND");
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case 74:{
        jj_consume_token(74);
        jj_consume_token(S_NUMBER);
        jj_consume_token(76);
        break;
        }
      default:
        jj_la1[116] = jj_gen;
        ;
      }
    } else {
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case S_IDENTIFIER:{
        ID("YEAR");
        switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
        case 74:{
          jj_consume_token(74);
          jj_consume_token(S_NUMBER);
          jj_consume_token(76);
          break;
          }
        default:
          jj_la1[117] = jj_gen;
          ;
        }
        jj_consume_token(116);
        ID("MONTH");
        switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
        case 74:{
          jj_consume_token(74);
          jj_consume_token(S_NUMBER);
          jj_consume_token(76);
          break;
          }
        default:
          jj_la1[118] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[119] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

  final public ExpressionNode FunctionCall() throws ParseException {
    FunctionReference();
    if ("TRIM".equalsIgnoreCase(lastObjectReference)) {
      TrimArguments();
    } else if ("EXTRACT".equalsIgnoreCase(lastObjectReference)) {
      jj_consume_token(74);
      DatetimeField();
      jj_consume_token(K_FROM);
      SQLSimpleExpression();
      jj_consume_token(76);
    } else {
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case 74:{
        jj_consume_token(74);
        if (jj_2_41(1)) {
          switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
          case K_ALL:
          case K_DISTINCT:
          case 98:{
            switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
            case K_ALL:{
              jj_consume_token(K_ALL);
              break;
              }
            case K_DISTINCT:{
              jj_consume_token(K_DISTINCT);
              break;
              }
            case 98:{
              jj_consume_token(98);
              break;
              }
            default:
              jj_la1[120] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          default:
            jj_la1[121] = jj_gen;
            ;
          }
          if (jj_2_40(1)) {
            FunctionArgumentList();
          } else {
            switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
            case 81:{
              jj_consume_token(81);
              break;
              }
            default:
              jj_la1[122] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        } else {
          ;
        }
        jj_consume_token(76);
        break;
        }
      default:
        jj_la1[123] = jj_gen;
        ;
      }
    }
}

  final public ExpressionNode FunctionReference() throws ParseException {CharSequence name;
    name = ObjectReference();
functions.add(name.toUpperCase());
}

  final public ExpressionNode FunctionArgumentList() throws ParseException {
    FunctionArgument();
    label_24:
    while (true) {
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case 75:{
        break;
        }
      default:
        jj_la1[124] = jj_gen;
        break label_24;
      }
      jj_consume_token(75);
      FunctionArgument();
    }
}

  final public ExpressionNode FunctionArgument() throws ParseException {
    if (jj_2_42(2)) {
      jj_consume_token(S_IDENTIFIER);
      jj_consume_token(95);
    } else {
      ;
    }
    SQLExpression();
}

  final public ExpressionNode TrimArguments() throws ParseException {
    jj_consume_token(74);
    if (getToken(1).image.matches("(?i)LEADING|TRAILING|BOTH")) {
      jj_consume_token(S_IDENTIFIER);
      if (jj_2_43(1)) {
        SQLSimpleExpression();
      } else {
        ;
      }
      jj_consume_token(K_FROM);
      SQLSimpleExpression();
    } else if (jj_2_44(1)) {
      SQLSimpleExpression();
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case K_FROM:{
        jj_consume_token(K_FROM);
        SQLSimpleExpression();
        break;
        }
      default:
        jj_la1[125] = jj_gen;
        ;
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(76);
}

  final public ExpressionNode DatetimeField() throws ParseException {
    jj_consume_token(S_IDENTIFIER);
}

  final public CharSequence ObjectReference() throws ParseException {CharSequence s;
    StringBuilder name = new StringBuilder();
    s = ObjectName();
name.append(s);
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case 85:{
      jj_consume_token(85);
      s = ObjectName();
name.append(".").append(s);
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case 85:{
        jj_consume_token(85);
        s = ObjectName();
name.append(".").append(s);
        break;
        }
      default:
        jj_la1[126] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[127] = jj_gen;
      ;
    }
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case 91:{
      jj_consume_token(91);
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case 87:{
        jj_consume_token(87);
        break;
        }
      case S_IDENTIFIER:{
        s = TNSName();
name.append("@").append(s);
        break;
        }
      default:
        jj_la1[128] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[129] = jj_gen;
      ;
    }
{if ("" != null) return lastObjectReference = name.toString();}
    throw new IllegalStateException ("Missing return statement in function");
}

  final public ExpressionNode OuterJoinExpression() throws ParseException {
    TableColumn();
    jj_consume_token(74);
    jj_consume_token(78);
    jj_consume_token(76);
}

  final public ExpressionNode SubQuery() throws ParseException {
    SelectStatement();
}

/** Expect an <S_IDENTIFIER> with the given value. */
  final public ExpressionNode ID(String id) throws ParseException {
    jj_consume_token(S_IDENTIFIER);
if (!token.image.matches("(?i)" + id)) {
            throw new ParseException("Encountered " + token.image
                + " at line " + token.beginLine + ", column " + token.beginColumn + "."
                + "\nWas expecting: " + id);
        }
    throw new IllegalStateException ("Missing return statement in function");
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_7()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_8()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_9()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_10()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_11()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_12()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_13()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_14()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_15()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_16()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_17()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_18()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_19()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_20()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_21()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_22()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_23()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_24()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_25()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_26()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_27()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_28()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_29()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_30()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_31()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_32()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_33()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_34()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_35()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_36()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_37()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_38()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_39()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_40()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_41()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_42()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_43()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_44()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_3R_165()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_170()) {
    jj_scanpos = xsp;
    if (jj_3R_171()) {
    jj_scanpos = xsp;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3R_172()) {
    jj_scanpos = xsp;
    if (jj_3R_173()) return true;
    }
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_174()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_175()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_176()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_177()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_170()
 {
    if (jj_3R_181()) return true;
    return false;
  }

  private boolean jj_3R_171()
 {
    if (jj_3R_182()) return true;
    return false;
  }

  private boolean jj_3_21()
 {
    if (jj_scan_token(74)) return true;
    if (jj_3R_36()) return true;
    if (jj_scan_token(76)) return true;
    return false;
  }

  private boolean jj_3R_172()
 {
    if (jj_scan_token(74)) return true;
    if (jj_3R_148()) return true;
    if (jj_scan_token(76)) return true;
    return false;
  }

  private boolean jj_3R_173()
 {
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3R_174()
 {
    if (jj_scan_token(108)) return true;
    if (jj_scan_token(74)) return true;
    if (jj_scan_token(S_NUMBER)) return true;
    if (jj_scan_token(75)) return true;
    if (jj_scan_token(S_IDENTIFIER)) return true;
    if (jj_scan_token(75)) return true;
    if (jj_scan_token(S_IDENTIFIER)) return true;
    if (jj_scan_token(76)) return true;
    return false;
  }

  private boolean jj_3R_175()
 {
    if (jj_scan_token(K_SAMPLE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_183()) jj_scanpos = xsp;
    if (jj_scan_token(74)) return true;
    if (jj_scan_token(S_NUMBER)) return true;
    if (jj_scan_token(76)) return true;
    return false;
  }

  private boolean jj_3R_176()
 {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_177()
 {
    if (jj_3R_184()) return true;
    return false;
  }

  private boolean jj_3R_149()
 {
    if (jj_scan_token(75)) return true;
    if (jj_3R_148()) return true;
    return false;
  }

  private boolean jj_3R_182()
 {
    if (jj_scan_token(K_TABLE)) return true;
    if (jj_scan_token(74)) return true;
    if (jj_3R_35()) return true;
    if (jj_scan_token(76)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_188()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_183()
 {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_163()
 {
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3R_184()
 {
    if (jj_3R_189()) return true;
    if (jj_3R_51()) return true;
    if (jj_3R_148()) return true;
    if (jj_scan_token(109)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_189()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_3R_191()) return true;
    }
    return false;
  }

  private boolean jj_3R_191()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(110)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) return true;
    }
    }
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_150()
 {
    if (jj_scan_token(K_WHERE)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_126()
 {
    if (jj_scan_token(K_ORDER)) return true;
    if (jj_scan_token(K_BY)) return true;
    if (jj_3R_133()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_134()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_133()
 {
    if (jj_3R_35()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_139()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_140()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_139()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) return true;
    }
    return false;
  }

  private boolean jj_3R_140()
 {
    if (jj_scan_token(111)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_188()
 {
    if (jj_scan_token(74)) return true;
    if (jj_scan_token(78)) return true;
    if (jj_scan_token(76)) return true;
    return false;
  }

  private boolean jj_3R_44()
 {
    if (jj_3R_59()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_120()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_59()
 {
    if (jj_3R_71()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_127()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_22()
 {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_71()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) return true;
    }
    return false;
  }

  private boolean jj_3_23()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(38)) jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_37()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(38)) jj_scanpos = xsp;
    if (jj_scan_token(112)) return true;
    if (jj_scan_token(74)) return true;
    if (jj_3R_36()) return true;
    if (jj_scan_token(76)) return true;
    return false;
  }

  private boolean jj_3R_120()
 {
    if (jj_scan_token(K_OR)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_134()
 {
    if (jj_scan_token(75)) return true;
    if (jj_3R_133()) return true;
    return false;
  }

  private boolean jj_3R_38()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3_25()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_144()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_57()
 {
    if (jj_scan_token(74)) return true;
    if (jj_3R_43()) return true;
    if (jj_scan_token(76)) return true;
    return false;
  }

  private boolean jj_3_25()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(113)) jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_144()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_151()) {
    jj_scanpos = xsp;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3R_152()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_151()
 {
    if (jj_3R_160()) return true;
    return false;
  }

  private boolean jj_3R_127()
 {
    if (jj_scan_token(K_AND)) return true;
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3_24()
 {
    if (jj_scan_token(74)) return true;
    if (jj_3R_35()) return true;
    if (jj_scan_token(75)) return true;
    return false;
  }

  private boolean jj_3R_43()
 {
    if (jj_3R_44()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_159()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_160()
 {
    if (jj_3R_166()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_167()) {
    jj_scanpos = xsp;
    if (jj_3_30()) return true;
    }
    return false;
  }

  private boolean jj_3R_167()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_179()) jj_scanpos = xsp;
    if (jj_scan_token(74)) return true;
    if (jj_3R_36()) return true;
    if (jj_scan_token(76)) return true;
    return false;
  }

  private boolean jj_3R_159()
 {
    if (jj_scan_token(75)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3_30()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(113)) jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_39()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(38)) jj_scanpos = xsp;
    if (jj_scan_token(K_IN)) return true;
    if (jj_scan_token(74)) return true;
    xsp = jj_scanpos;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3_32()) return true;
    }
    if (jj_scan_token(76)) return true;
    return false;
  }

  private boolean jj_3R_179()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_scan_token(8)) return true;
    }
    return false;
  }

  private boolean jj_3_27()
 {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3_29()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(8)) {
    jj_scanpos = xsp;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_28()
 {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3_26()
 {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_152()
 {
    if (jj_3R_161()) return true;
    return false;
  }

  private boolean jj_3R_40()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(38)) jj_scanpos = xsp;
    if (jj_scan_token(K_BETWEEN)) return true;
    if (jj_3R_35()) return true;
    if (jj_scan_token(K_AND)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_41()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(38)) jj_scanpos = xsp;
    if (jj_scan_token(K_LIKE)) return true;
    if (jj_3R_35()) return true;
    xsp = jj_scanpos;
    if (jj_3R_168()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_31()
 {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_35()
 {
    if (jj_3R_56()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_58()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_42()
 {
    if (jj_scan_token(74)) return true;
    if (jj_scan_token(K_SELECT)) return true;
    return false;
  }

  private boolean jj_3R_56()
 {
    if (jj_3R_69()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_70()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_98()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_3R_108()) return true;
    }
    return false;
  }

  private boolean jj_3R_108()
 {
    if (jj_scan_token(64)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) return true;
    }
    return false;
  }

  private boolean jj_3R_69()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_77()) jj_scanpos = xsp;
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_77()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) return true;
    }
    return false;
  }

  private boolean jj_3R_78()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = seeAnalyticFunction();
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_111()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_83()
 {
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3R_84()
 {
    if (jj_scan_token(74)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3_34()) return true;
    }
    if (jj_scan_token(76)) return true;
    return false;
  }

  private boolean jj_3_32()
 {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_85()
 {
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3_35()
 {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_86()
 {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_87()
 {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3_33()
 {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_88()
 {
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_89()
 {
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_90()
 {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_70()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) return true;
    }
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_58()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) return true;
    }
    }
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_168()
 {
    if (jj_scan_token(114)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_36()
 {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_97()
 {
    if (jj_scan_token(K_CASE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_110()) jj_scanpos = xsp;
    if (jj_scan_token(K_END)) return true;
    return false;
  }

  private boolean jj_3_37()
 {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3_38()
 {
    if (jj_3R_32()) return true;
    if (jj_scan_token(74)) return true;
    return false;
  }

  private boolean jj_3R_110()
 {
    if (jj_scan_token(K_ELSE)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_39()
 {
    if (jj_3R_35()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_117()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_30()
 {
    if (jj_scan_token(K_CAST)) return true;
    if (jj_scan_token(74)) return true;
    if (jj_3R_44()) return true;
    if (jj_scan_token(K_AS)) return true;
    if (jj_3R_111()) return true;
    if (jj_scan_token(76)) return true;
    return false;
  }

  private boolean jj_3R_109()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_118()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_118()
 {
    if (jj_scan_token(101)) return true;
    if (jj_3R_44()) return true;
    if (jj_scan_token(115)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_31()
 {
    if (jj_3R_51()) return true;
    if (jj_3R_35()) return true;
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = "DAY".equalsIgnoreCase(getToken(1).image);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) return true;
    }
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_scan_token(74)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_52()
 {
    if (jj_3R_51()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) jj_scanpos = xsp;
    if (jj_scan_token(116)) return true;
    if (jj_3R_51()) return true;
    xsp = jj_scanpos;
    if (jj_3R_64()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_53()
 {
    if (jj_3R_51()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) jj_scanpos = xsp;
    if (jj_scan_token(116)) return true;
    if (jj_3R_51()) return true;
    xsp = jj_scanpos;
    if (jj_3R_66()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_34()
 {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_100()
 {
    if (jj_3R_32()) return true;
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = "TRIM".equalsIgnoreCase(lastObjectReference);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_113()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = "EXTRACT".equalsIgnoreCase(lastObjectReference);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_63()
 {
    if (jj_scan_token(74)) return true;
    if (jj_scan_token(S_NUMBER)) return true;
    if (jj_scan_token(76)) return true;
    return false;
  }

  private boolean jj_3R_113()
 {
    if (jj_3R_122()) return true;
    return false;
  }

  private boolean jj_3R_117()
 {
    if (jj_scan_token(101)) return true;
    if (jj_3R_35()) return true;
    if (jj_scan_token(115)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_114()
 {
    if (jj_scan_token(74)) return true;
    if (jj_scan_token(58)) return true;
    if (jj_scan_token(K_FROM)) return true;
    if (jj_3R_35()) return true;
    if (jj_scan_token(76)) return true;
    return false;
  }

  private boolean jj_3R_193()
 {
    if (jj_3R_194()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_195()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_65()
 {
    if (jj_scan_token(74)) return true;
    if (jj_scan_token(S_NUMBER)) return true;
    if (jj_scan_token(76)) return true;
    return false;
  }

  private boolean jj_3R_115()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_123()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_123()
 {
    if (jj_scan_token(74)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_41()) jj_scanpos = xsp;
    if (jj_scan_token(76)) return true;
    return false;
  }

  private boolean jj_3_41()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) return true;
    }
    return false;
  }

  private boolean jj_3R_32()
 {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_47()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(98)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_194()
 {
    if (jj_3R_196()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_197()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_46()
 {
    if (jj_3R_60()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_147()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_196()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(38)) jj_scanpos = xsp;
    if (jj_3R_198()) return true;
    return false;
  }

  private boolean jj_3R_60()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_42()) jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3_42()
 {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    if (jj_scan_token(95)) return true;
    return false;
  }

  private boolean jj_3R_195()
 {
    if (jj_scan_token(K_OR)) return true;
    if (jj_3R_194()) return true;
    return false;
  }

  private boolean jj_3R_122()
 {
    if (jj_scan_token(74)) return true;
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).image.matches("(?i)LEADING|TRAILING|BOTH");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3_44()) return true;
    }
    if (jj_scan_token(76)) return true;
    return false;
  }

  private boolean jj_3R_198()
 {
    if (jj_3R_49()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_199()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_199()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_200()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_201()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_200()
 {
    if (jj_3R_166()) return true;
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_130()
 {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_43()) jj_scanpos = xsp;
    if (jj_scan_token(K_FROM)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_44()
 {
    if (jj_3R_35()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_137()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_147()
 {
    if (jj_scan_token(75)) return true;
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_64()
 {
    if (jj_scan_token(74)) return true;
    if (jj_scan_token(S_NUMBER)) return true;
    if (jj_scan_token(76)) return true;
    return false;
  }

  private boolean jj_3R_66()
 {
    if (jj_scan_token(74)) return true;
    if (jj_scan_token(S_NUMBER)) return true;
    if (jj_scan_token(76)) return true;
    return false;
  }

  private boolean jj_3R_201()
 {
    if (jj_3R_161()) return true;
    return false;
  }

  private boolean jj_3_40()
 {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_202()
 {
    if (jj_3R_193()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_203()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_48()
 {
    if (jj_3R_34()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_67()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_197()
 {
    if (jj_scan_token(K_AND)) return true;
    if (jj_3R_196()) return true;
    return false;
  }

  private boolean jj_3R_67()
 {
    if (jj_scan_token(85)) return true;
    if (jj_3R_34()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_75()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_26()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(38)) jj_scanpos = xsp;
    if (jj_scan_token(K_IN)) return true;
    if (jj_scan_token(74)) return true;
    if (jj_3R_202()) return true;
    if (jj_scan_token(76)) return true;
    return false;
  }

  private boolean jj_3R_75()
 {
    if (jj_scan_token(85)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3_43()
 {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_68()
 {
    if (jj_scan_token(91)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_3R_76()) return true;
    }
    return false;
  }

  private boolean jj_3R_27()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(38)) jj_scanpos = xsp;
    if (jj_scan_token(K_BETWEEN)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(K_AND)) return true;
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_45()
 {
    if (jj_3R_25()) return true;
    if (jj_scan_token(74)) return true;
    if (jj_scan_token(78)) return true;
    if (jj_scan_token(76)) return true;
    return false;
  }

  private boolean jj_3R_137()
 {
    if (jj_scan_token(K_FROM)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_203()
 {
    if (jj_scan_token(75)) return true;
    if (jj_3R_193()) return true;
    return false;
  }

  private boolean jj_3R_28()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(38)) jj_scanpos = xsp;
    if (jj_scan_token(K_LIKE)) return true;
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_76()
 {
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3R_36()
 {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_161()
 {
    if (jj_scan_token(K_IS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(38)) jj_scanpos = xsp;
    if (jj_scan_token(K_NULL)) return true;
    return false;
  }

  private boolean jj_3R_51()
 {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_49()
 {
    if (jj_3R_61()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_180()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_61()
 {
    if (jj_3R_72()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_185()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_72()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) return true;
    }
    return false;
  }

  private boolean jj_3R_79()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) return true;
    }
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_80()
 {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_91()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_101()
 {
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3R_102()
 {
    if (jj_scan_token(74)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_192()) return true;
    }
    if (jj_scan_token(76)) return true;
    return false;
  }

  private boolean jj_3R_103()
 {
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_104()
 {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) return true;
    }
    if (jj_scan_token(84)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_105()
 {
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_185()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_3R_190()) return true;
    }
    }
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_106()
 {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_180()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) return true;
    }
    }
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_25()
 {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_3R_32()) return true;
    if (jj_scan_token(74)) return true;
    return false;
  }

  private boolean jj_3R_34()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) return true;
    }
    return false;
  }

  private boolean jj_3R_54()
 {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_55()
 {
    if (jj_scan_token(S_QUOTED_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_82()
 {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_96()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_96()
 {
    if (jj_scan_token(85)) return true;
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_190()
 {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_166()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_3R_178()) {
    jj_scanpos = xsp;
    if (jj_scan_token(88)) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_scan_token(90)) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_178()
 {
    if (jj_scan_token(87)) return true;
    if (jj_scan_token(86)) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_scan_token(89)) return true;
    if (jj_scan_token(86)) return true;
    return false;
  }

  private boolean jj_3R_192()
 {
    if (jj_3R_193()) return true;
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_scan_token(90)) return true;
    if (jj_scan_token(89)) return true;
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_scan_token(90)) return true;
    if (jj_scan_token(86)) return true;
    return false;
  }

  private boolean jj_3R_181()
 {
    if (jj_3R_34()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_186()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_187()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_186()
 {
    if (jj_scan_token(85)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_187()
 {
    if (jj_scan_token(91)) return true;
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3_13()
 {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    if (jj_scan_token(95)) return true;
    return false;
  }

  private boolean jj_3R_29()
 {
    if (jj_3R_50()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_119()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_119()
 {
    if (jj_3R_126()) return true;
    return false;
  }

  private boolean jj_3R_50()
 {
    if (jj_3R_62()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_125()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_62()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) return true;
    }
    return false;
  }

  private boolean jj_3R_73()
 {
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_81()
 {
    if (jj_scan_token(K_SELECT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_92()) jj_scanpos = xsp;
    if (jj_3R_93()) return true;
    xsp = jj_scanpos;
    if (jj_3R_94()) jj_scanpos = xsp;
    if (jj_3R_95()) return true;
    xsp = jj_scanpos;
    if (jj_3R_143()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_125()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_scan_token(96)) {
    jj_scanpos = xsp;
    if (jj_scan_token(97)) return true;
    }
    }
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_94()
 {
    if (jj_3R_107()) return true;
    return false;
  }

  private boolean jj_3R_132()
 {
    if (jj_scan_token(K_UNION)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(5)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_74()
 {
    if (jj_scan_token(74)) return true;
    if (jj_3R_36()) return true;
    if (jj_scan_token(76)) return true;
    return false;
  }

  private boolean jj_3R_143()
 {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_93()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_3_14()) return true;
    }
    return false;
  }

  private boolean jj_3R_92()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(98)) return true;
    }
    }
    return false;
  }

  private boolean jj_3_14()
 {
    if (jj_3R_33()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_116()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_33()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_124()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_15()
 {
    if (jj_3R_34()) return true;
    if (jj_scan_token(99)) return true;
    return false;
  }

  private boolean jj_3_16()
 {
    if (jj_3R_34()) return true;
    if (jj_scan_token(85)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(99)) return true;
    return false;
  }

  private boolean jj_3_17()
 {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_124()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(9)) jj_scanpos = xsp;
    if (jj_3R_131()) return true;
    return false;
  }

  private boolean jj_3R_131()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_scan_token(100)) {
    jj_scanpos = xsp;
    if (jj_scan_token(101)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_138()
 {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_116()
 {
    if (jj_scan_token(75)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_99()
 {
    if (jj_3R_100()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_112()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_121()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_128()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_129()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_128()
 {
    if (jj_3R_135()) return true;
    return false;
  }

  private boolean jj_3R_135()
 {
    if (jj_scan_token(K_PARTITION)) return true;
    if (jj_scan_token(K_BY)) return true;
    if (jj_3R_44()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_141()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_112()
 {
    if (jj_scan_token(102)) return true;
    if (jj_scan_token(74)) return true;
    if (jj_3R_121()) return true;
    if (jj_scan_token(76)) return true;
    return false;
  }

  private boolean jj_3R_142()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(103)) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_145()
 {
    if (jj_scan_token(105)) return true;
    if (jj_scan_token(106)) return true;
    return false;
  }

  private boolean jj_3_20()
 {
    if (jj_3R_35()) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_146()
 {
    if (jj_scan_token(K_BETWEEN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_153()) {
    jj_scanpos = xsp;
    if (jj_3_18()) return true;
    }
    if (jj_scan_token(K_AND)) return true;
    xsp = jj_scanpos;
    if (jj_3R_154()) {
    jj_scanpos = xsp;
    if (jj_3_19()) return true;
    }
    return false;
  }

  private boolean jj_3R_107()
 {
    if (jj_scan_token(K_INTO)) return true;
    if (jj_3R_155()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_156()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_129()
 {
    if (jj_3R_126()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_136()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_153()
 {
    if (jj_scan_token(105)) return true;
    if (jj_scan_token(106)) return true;
    return false;
  }

  private boolean jj_3_18()
 {
    if (jj_3R_35()) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_154()
 {
    if (jj_scan_token(105)) return true;
    if (jj_scan_token(106)) return true;
    return false;
  }

  private boolean jj_3_19()
 {
    if (jj_3R_35()) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_155()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_162()) {
    jj_scanpos = xsp;
    if (jj_3R_163()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_164()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_162()
 {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_169()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_164()
 {
    if (jj_scan_token(74)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(76)) return true;
    return false;
  }

  private boolean jj_3R_95()
 {
    if (jj_scan_token(K_FROM)) return true;
    if (jj_3R_148()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_149()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_141()
 {
    if (jj_scan_token(75)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_148()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_157()) {
    jj_scanpos = xsp;
    if (jj_3R_158()) return true;
    }
    return false;
  }

  private boolean jj_3R_156()
 {
    if (jj_scan_token(75)) return true;
    if (jj_3R_155()) return true;
    return false;
  }

  private boolean jj_3R_157()
 {
    if (jj_scan_token(107)) return true;
    if (jj_scan_token(74)) return true;
    if (jj_3R_165()) return true;
    if (jj_scan_token(76)) return true;
    return false;
  }

  private boolean jj_3R_158()
 {
    if (jj_3R_165()) return true;
    return false;
  }

  private boolean jj_3R_136()
 {
    if (jj_3R_142()) return true;
    return false;
  }

  private boolean jj_3R_169()
 {
    if (jj_scan_token(85)) return true;
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[130];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	   jj_la1_init_3();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x0,0x0,0x4942000,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x20001000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x30000,0x30000,0x0,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000000,0x0,0x0,0x0,0x24942000,0x0,0x0,0x0,0x20,0x0,0x0,0x400020,0x400020,0x0,0x0,0x0,0x0,0x200,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x90000000,0x0,0x10000000,0x90000000,0x0,0x200400,0x200400,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x20001000,0x0,0x120,0x120,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x0,0x0,0x0,0x1000000,0x0,0x0,0x0,0x0,0x0,0x400020,0x400020,0x0,0x0,0x0,0x8000000,0x0,0x0,0x0,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x4100000,0x20000000,0x20000,0x1000,0x0,0x11000,0x100,0x0,0x40,0x0,0x4,0x54,0x0,0x40,0x40,0x40,0x40,0x0,0x0,0x4000000,0x4000000,0x0,0xe4100080,0xe41000c0,0x4000000,0x60100080,0x84000000,0x84000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4100000,0x0,0x0,0x0,0x0,0x20000,0x0,0x200,0x8000,0x0,0x8000,0x1000,0x0,0x0,0x2,0x40000,0x0,0x0,0x0,0x84000000,0x84000000,0x0,0x400,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x24000000,0x0,0x0,0xa4004000,0x84004000,0x20000000,0x0,0x4000000,0x800,0x84000000,0x8,0x0,0x8,0x8,0x0,0x0,0x0,0x0,0x100,0x0,0x40,0x40,0x0,0x0,0x4,0x54,0x0,0x0,0x0,0x0,0x40,0x40,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x60100080,0x84000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x0,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x0,0x1,0x1fe,0x600,0x800,0x400,0x0,0x0,0x0,0x7c00000,0x0,0x7c00000,0x800,0x0,0x0,0x0,0x0,0x1c000,0x1c000,0x60000,0x60000,0xc000,0x8c401,0x8c401,0x80000,0x401,0x0,0x0,0x200000,0x1c00000,0x2000000,0x4000000,0x200000,0x8000000,0x800,0xc000,0xc000,0xc000,0x0,0x10000000,0x60000000,0x60000000,0x100001fe,0x800,0x0,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x800,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x0,0x0,0x0,0x0,0x0,0x800,0x200000,0x1,0x400,0x800,0x401,0x0,0x401,0x0,0x0,0x0,0x0,0x0,0x400,0x0,0x0,0x800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7c00000,0x0,0x7c00000,0x800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1c000,0x1c000,0x60000,0x60000,0xc000,0xc000,0x401,0x0,0x0,0x0,0x0,0x400,0x400,0x400,0x400,0x0,0x0,0x0,0x20000,0x400,0x800,0x0,0x200000,0x200000,0x800000,0x8000000,};
	}
	private static void jj_la1_init_3() {
	   jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x3,0x0,0x4,0x4,0x0,0x0,0x0,0x0,0x0,0x30,0x30,0x40,0x0,0x180,0x0,0x0,0x180,0x200,0x200,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x0,0x0,0x1000,0x0,0x0,0x0,0x4000,0x0,0x4000,0x4000,0x0,0x0,0x0,0x8000,0x0,0x0,0x0,0x0,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x0,0x0,0x0,0x40000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
	}
  private final JJCalls[] jj_2_rtns = new JJCalls[44];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /**
   * Constructor with InputStream.
   * @param stream char stream
   */
  public Parser(final Provider stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
   for (int i = 0; i < 130; i++)
     jj_la1[i] = -1;
   for (int i = 0; i < jj_2_rtns.length; i++)
     jj_2_rtns[i] = new JJCalls();
  }

  /**
   * Constructor with InputStream.
   * @param sDSL String representation to be parsed
   */
  public Parser(final String sDSL) {
	   this(new StringProvider(sDSL));
  }

  /**
   * Reinitialise.
   * @param sDSL String representation to be parsed
   */
  public void ReInit(final String sDSL) {
	  ReInit(new StringProvider(sDSL));
  }
  /**
   * Reinitialise
   * @param stream char stream
   */
  public void ReInit(final Provider stream) {
	if (jj_input_stream == null) {
	  jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	  jj_input_stream.reInit(stream, 1, 1);
  }
	if (token_source == null) {
 token_source = new ParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
   for (int i = 0; i < 130; i++)
     jj_la1[i] = -1;
   for (int i = 0; i < jj_2_rtns.length; i++)
     jj_2_rtns[i] = new JJCalls();
  }

  /**
   * Constructor with generated Token Manager.
   * @param tm Token manager to use
   */
  public Parser(final ParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 130; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /**
   * Reinitialise
   * @param tm Token manager to use
   */
  public void ReInit(final ParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 130; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(final int kind) throws ParseException {
    final Token oldToken = token;
    if (token.next != null)
      token = token.next;
    else {
      token.next = token_source.getNextToken();
      token = token.next;
    }
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen)
              c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  private static final class LookaheadSuccess extends IllegalStateException {}
  private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		   jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		   jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


  /**
   * @return the next Token.
   */
  public final Token getNextToken() {
   if (token.next != null)
     token = token.next;
   else
     token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

  /**
   * @param index index to be retrieved
   * @return the specific Token.
   */
  public final Token getToken(final int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next == null)
        t.next = token_source.getNextToken();
      t = t.next;
    }
    return t;
  }

  private int jj_ntk_f() {
    jj_nt = token.next;
    if (jj_nt == null) {
      token.next = token_source.getNextToken();
      jj_ntk = token.next.kind;
      return jj_ntk;
    }
    jj_ntk = jj_nt.kind;
    return jj_ntk;
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
  if (pos >= 100) {
    return;
  }

  if (pos == jj_endpos + 1) {
    jj_lasttokens[jj_endpos++] = kind;
  } else if (jj_endpos != 0) {
    jj_expentry = new int[jj_endpos];

    for (int i = 0; i < jj_endpos; i++) {
      jj_expentry[i] = jj_lasttokens[i];
    }

    for (final int[] oldentry : jj_expentries) {
      if (oldentry.length == jj_expentry.length) {
        boolean isMatched = true;
        for (int i = 0; i < jj_expentry.length; i++) {
          if (oldentry[i] != jj_expentry[i]) {
            isMatched = false;
            break;
          }
        }
        if (isMatched) {
          jj_expentries.add(jj_expentry);
          break;
        }
      }
    }

    if (pos != 0) {
      jj_endpos = pos;
      jj_lasttokens[jj_endpos - 1] = kind;
    }
  }
}

  /**
   * Generate ParseException.
   * @return new Exception object. Never <code>null</code>
   */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[117];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 130; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 117; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage, token_source == null ? null : ParserTokenManager.lexStateNames[token_source.curLexState]);
  }

  /**
   * @return Always <code>false</code>.
   */
  public final boolean trace_enabled() {
    return false;
  }

  /** Enable tracing. */
  public final void enable_tracing() {}

  /** Disable tracing. */
  public final void disable_tracing() {}

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 44; i++) {
      try {
        JJCalls p = jj_2_rtns[i];
        do {
          if (p.gen > jj_gen) {
            jj_la = p.arg;
            jj_scanpos = p.first;
            jj_lastpos = p.first;
            switch (i) {
              case 0: jj_3_1(); break;
              case 1: jj_3_2(); break;
              case 2: jj_3_3(); break;
              case 3: jj_3_4(); break;
              case 4: jj_3_5(); break;
              case 5: jj_3_6(); break;
              case 6: jj_3_7(); break;
              case 7: jj_3_8(); break;
              case 8: jj_3_9(); break;
              case 9: jj_3_10(); break;
              case 10: jj_3_11(); break;
              case 11: jj_3_12(); break;
              case 12: jj_3_13(); break;
              case 13: jj_3_14(); break;
              case 14: jj_3_15(); break;
              case 15: jj_3_16(); break;
              case 16: jj_3_17(); break;
              case 17: jj_3_18(); break;
              case 18: jj_3_19(); break;
              case 19: jj_3_20(); break;
              case 20: jj_3_21(); break;
              case 21: jj_3_22(); break;
              case 22: jj_3_23(); break;
              case 23: jj_3_24(); break;
              case 24: jj_3_25(); break;
              case 25: jj_3_26(); break;
              case 26: jj_3_27(); break;
              case 27: jj_3_28(); break;
              case 28: jj_3_29(); break;
              case 29: jj_3_30(); break;
              case 30: jj_3_31(); break;
              case 31: jj_3_32(); break;
              case 32: jj_3_33(); break;
              case 33: jj_3_34(); break;
              case 34: jj_3_35(); break;
              case 35: jj_3_36(); break;
              case 36: jj_3_37(); break;
              case 37: jj_3_38(); break;
              case 38: jj_3_39(); break;
              case 39: jj_3_40(); break;
              case 40: jj_3_41(); break;
              case 41: jj_3_42(); break;
              case 42: jj_3_43(); break;
              case 43: jj_3_44(); break;
            }
          }
          p = p.next;
        } while (p != null);
      } catch(LookaheadSuccess ls) { /* ignore */ }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) {
        p.next = new JJCalls();
        p = p.next;
        break;
      }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; 
    p.first = token;
    p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
